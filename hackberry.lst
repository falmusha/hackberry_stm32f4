
hackberry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004640  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  080047c8  080047c8  0000c7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080047d0  080047d0  0000c7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080047d8  080047d8  0000c7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000874  20000000  080047dc  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .jcr          00000004  20000874  08005050  00010874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000005c  20000878  08005054  00010878  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200008d4  080050b0  00010878  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00010878  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005a19  00000000  00000000  000108a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000107d  00000000  00000000  000162bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000001c8  00000000  00000000  00017340  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001b9a  00000000  00000000  00017508  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002597  00000000  00000000  000190a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000070  00000000  00000000  0001b639  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002268  00000000  00000000  0001b6ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000020  00000000  00000000  0001d918  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000878 	.word	0x20000878
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080047ac 	.word	0x080047ac

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	080047ac 	.word	0x080047ac
 80001d8:	2000087c 	.word	0x2000087c
 80001dc:	20000874 	.word	0x20000874
 80001e0:	00000000 	.word	0x00000000

080001e4 <_mainCRTStartup>:
 80001e4:	4b15      	ldr	r3, [pc, #84]	; (800023c <_mainCRTStartup+0x58>)
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	bf08      	it	eq
 80001ea:	4b13      	ldreq	r3, [pc, #76]	; (8000238 <_mainCRTStartup+0x54>)
 80001ec:	469d      	mov	sp, r3
 80001ee:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001f2:	2100      	movs	r1, #0
 80001f4:	468b      	mov	fp, r1
 80001f6:	460f      	mov	r7, r1
 80001f8:	4813      	ldr	r0, [pc, #76]	; (8000248 <_mainCRTStartup+0x64>)
 80001fa:	4a14      	ldr	r2, [pc, #80]	; (800024c <_mainCRTStartup+0x68>)
 80001fc:	1a12      	subs	r2, r2, r0
 80001fe:	f003 fd4d 	bl	8003c9c <memset>
 8000202:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <_mainCRTStartup+0x5c>)
 8000204:	2b00      	cmp	r3, #0
 8000206:	d000      	beq.n	800020a <_mainCRTStartup+0x26>
 8000208:	4798      	blx	r3
 800020a:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <_mainCRTStartup+0x60>)
 800020c:	2b00      	cmp	r3, #0
 800020e:	d000      	beq.n	8000212 <_mainCRTStartup+0x2e>
 8000210:	4798      	blx	r3
 8000212:	2000      	movs	r0, #0
 8000214:	2100      	movs	r1, #0
 8000216:	0004      	movs	r4, r0
 8000218:	000d      	movs	r5, r1
 800021a:	480d      	ldr	r0, [pc, #52]	; (8000250 <_mainCRTStartup+0x6c>)
 800021c:	2800      	cmp	r0, #0
 800021e:	d002      	beq.n	8000226 <_mainCRTStartup+0x42>
 8000220:	480c      	ldr	r0, [pc, #48]	; (8000254 <_mainCRTStartup+0x70>)
 8000222:	f003 fdfd 	bl	8003e20 <atexit>
 8000226:	f003 fd11 	bl	8003c4c <__libc_init_array>
 800022a:	0020      	movs	r0, r4
 800022c:	0029      	movs	r1, r5
 800022e:	f000 f813 	bl	8000258 <main>
 8000232:	f003 fcfb 	bl	8003c2c <exit>
 8000236:	bf00      	nop
 8000238:	00080000 	.word	0x00080000
	...
 8000248:	20000878 	.word	0x20000878
 800024c:	200008d4 	.word	0x200008d4
 8000250:	08003e21 	.word	0x08003e21
 8000254:	08003e2d 	.word	0x08003e2d

08000258 <main>:
#include "stm32f4xx.h"
#include "camera_peripherals.h"
#include "fifo_peripherals.h"

int main(void) {
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0

  
  initCameraClk();
 800025c:	f000 f8d6 	bl	800040c <initCameraClk>
  initFifoClk();
 8000260:	f000 f802 	bl	8000268 <initFifoClk>

  while(1); // Don't wait to exit
 8000264:	e7fe      	b.n	8000264 <main+0xc>
 8000266:	bf00      	nop

08000268 <initFifoClk>:
#include "stm32f4xx_it.h"
#include "fifo_peripherals.h"
#include "delay.h"

void initFifoClk() {
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
  /* timer_tick_frequency = TIM4_default_frequency / (prescaler + 1) */
	/* PWM_frequency = timer_tick_frequency / (period + 1) */
	/* period = timer_tick_frequency / PWM_frequency - 1 */

  /* 5.3 Mhz */
  uint16_t period = 3-1;
 800026e:	2302      	movs	r3, #2
 8000270:	80fb      	strh	r3, [r7, #6]
  uint16_t prescaler = 0;
 8000272:	2300      	movs	r3, #0
 8000274:	80bb      	strh	r3, [r7, #4]

  initTim3ForFifoClk(period, prescaler);
 8000276:	88fa      	ldrh	r2, [r7, #6]
 8000278:	88bb      	ldrh	r3, [r7, #4]
 800027a:	4610      	mov	r0, r2
 800027c:	4619      	mov	r1, r3
 800027e:	f000 f829 	bl	80002d4 <initTim3ForFifoClk>
  initGPIOForFifoClk();
 8000282:	f000 f807 	bl	8000294 <initGPIOForFifoClk>
  initPWMForFifoClk(period);
 8000286:	88fb      	ldrh	r3, [r7, #6]
 8000288:	4618      	mov	r0, r3
 800028a:	f000 f84b 	bl	8000324 <initPWMForFifoClk>

}
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <initGPIOForFifoClk>:

void initGPIOForFifoClk(void) {
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
  
  // Configure GPIO port C pin 12 to output 
  // pin to send clk signal to camera

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800029a:	2001      	movs	r0, #1
 800029c:	2101      	movs	r1, #1
 800029e:	f000 ffb7 	bl	8001210 <RCC_AHB1PeriphClockCmd>

  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 80002a2:	2340      	movs	r3, #64	; 0x40
 80002a4:	603b      	str	r3, [r7, #0]

  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002a6:	2300      	movs	r3, #0
 80002a8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80002aa:	2300      	movs	r3, #0
 80002ac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80002ae:	2302      	movs	r3, #2
 80002b0:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80002b2:	2303      	movs	r3, #3
 80002b4:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80002b6:	463b      	mov	r3, r7
 80002b8:	4805      	ldr	r0, [pc, #20]	; (80002d0 <initGPIOForFifoClk+0x3c>)
 80002ba:	4619      	mov	r1, r3
 80002bc:	f001 fc3a 	bl	8001b34 <GPIO_Init>

  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_TIM3);
 80002c0:	4803      	ldr	r0, [pc, #12]	; (80002d0 <initGPIOForFifoClk+0x3c>)
 80002c2:	2106      	movs	r1, #6
 80002c4:	2202      	movs	r2, #2
 80002c6:	f001 fda3 	bl	8001e10 <GPIO_PinAFConfig>
}
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40020000 	.word	0x40020000

080002d4 <initTim3ForFifoClk>:

void initTim3ForFifoClk(uint16_t period, uint16_t prescaler) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	460a      	mov	r2, r1
 80002de:	80fb      	strh	r3, [r7, #6]
 80002e0:	4613      	mov	r3, r2
 80002e2:	80bb      	strh	r3, [r7, #4]
  
  //Enable APB2 Peripheral Clock
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80002e4:	2002      	movs	r0, #2
 80002e6:	2101      	movs	r1, #1
 80002e8:	f000 ffec 	bl	80012c4 <RCC_APB1PeriphClockCmd>

  TIM_TimeBaseInitTypeDef timerInitStructure;
  timerInitStructure.TIM_Prescaler = prescaler;
 80002ec:	88bb      	ldrh	r3, [r7, #4]
 80002ee:	81bb      	strh	r3, [r7, #12]
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80002f0:	2300      	movs	r3, #0
 80002f2:	81fb      	strh	r3, [r7, #14]
  timerInitStructure.TIM_Period = period;
 80002f4:	88fb      	ldrh	r3, [r7, #6]
 80002f6:	613b      	str	r3, [r7, #16]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	82bb      	strh	r3, [r7, #20]

  TIM_TimeBaseInit(TIM3, &timerInitStructure);
 80002fc:	f107 030c 	add.w	r3, r7, #12
 8000300:	4807      	ldr	r0, [pc, #28]	; (8000320 <initTim3ForFifoClk+0x4c>)
 8000302:	4619      	mov	r1, r3
 8000304:	f001 feaa 	bl	800205c <TIM_TimeBaseInit>

  TIM_ARRPreloadConfig(TIM3, ENABLE);
 8000308:	4805      	ldr	r0, [pc, #20]	; (8000320 <initTim3ForFifoClk+0x4c>)
 800030a:	2101      	movs	r1, #1
 800030c:	f001 ffd0 	bl	80022b0 <TIM_ARRPreloadConfig>

  // Enable Timer 3
  TIM_Cmd(TIM3, ENABLE);
 8000310:	4803      	ldr	r0, [pc, #12]	; (8000320 <initTim3ForFifoClk+0x4c>)
 8000312:	2101      	movs	r1, #1
 8000314:	f002 f824 	bl	8002360 <TIM_Cmd>

}
 8000318:	3718      	adds	r7, #24
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40000400 	.word	0x40000400

08000324 <initPWMForFifoClk>:

void initPWMForFifoClk(uint16_t period) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b088      	sub	sp, #32
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	80fb      	strh	r3, [r7, #6]

  uint16_t pulse;

  pulse = period/2;
 800032e:	88fb      	ldrh	r3, [r7, #6]
 8000330:	085b      	lsrs	r3, r3, #1
 8000332:	83fb      	strh	r3, [r7, #30]

  TIM_OCInitTypeDef outputChannelInit;
  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8000334:	2360      	movs	r3, #96	; 0x60
 8000336:	813b      	strh	r3, [r7, #8]
  outputChannelInit.TIM_Pulse = pulse;
 8000338:	8bfb      	ldrh	r3, [r7, #30]
 800033a:	613b      	str	r3, [r7, #16]
  outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
 800033c:	2301      	movs	r3, #1
 800033e:	817b      	strh	r3, [r7, #10]
  outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;
 8000340:	2300      	movs	r3, #0
 8000342:	82bb      	strh	r3, [r7, #20]

  TIM_OC1Init(TIM3, &outputChannelInit);
 8000344:	f107 0308 	add.w	r3, r7, #8
 8000348:	4807      	ldr	r0, [pc, #28]	; (8000368 <initPWMForFifoClk+0x44>)
 800034a:	4619      	mov	r1, r3
 800034c:	f002 f828 	bl	80023a0 <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
 8000350:	4805      	ldr	r0, [pc, #20]	; (8000368 <initPWMForFifoClk+0x44>)
 8000352:	2108      	movs	r1, #8
 8000354:	f002 fb38 	bl	80029c8 <TIM_OC1PreloadConfig>

  TIM_CtrlPWMOutputs(TIM3, ENABLE);
 8000358:	4803      	ldr	r0, [pc, #12]	; (8000368 <initPWMForFifoClk+0x44>)
 800035a:	2101      	movs	r1, #1
 800035c:	f002 ff64 	bl	8003228 <TIM_CtrlPWMOutputs>

}
 8000360:	3720      	adds	r7, #32
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40000400 	.word	0x40000400

0800036c <configure_FIFO_RRST>:

void configure_FIFO_RRST() {
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000372:	2040      	movs	r0, #64	; 0x40
 8000374:	2101      	movs	r1, #1
 8000376:	f000 ff4b 	bl	8001210 <RCC_AHB1PeriphClockCmd>
  
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800037a:	2301      	movs	r3, #1
 800037c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800037e:	2300      	movs	r3, #0
 8000380:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000382:	2302      	movs	r3, #2
 8000384:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000386:	2300      	movs	r3, #0
 8000388:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 800038a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800038e:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000390:	463b      	mov	r3, r7
 8000392:	4803      	ldr	r0, [pc, #12]	; (80003a0 <configure_FIFO_RRST+0x34>)
 8000394:	4619      	mov	r1, r3
 8000396:	f001 fbcd 	bl	8001b34 <GPIO_Init>

}
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40021800 	.word	0x40021800

080003a4 <configure_FIFO_WRST>:

void configure_FIFO_WRST() {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80003aa:	2002      	movs	r0, #2
 80003ac:	2101      	movs	r1, #1
 80003ae:	f000 ff2f 	bl	8001210 <RCC_AHB1PeriphClockCmd>
  
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80003b2:	2301      	movs	r3, #1
 80003b4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80003b6:	2300      	movs	r3, #0
 80003b8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80003ba:	2302      	movs	r3, #2
 80003bc:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80003c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003c6:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOB, &GPIO_InitStructure);
 80003c8:	463b      	mov	r3, r7
 80003ca:	4803      	ldr	r0, [pc, #12]	; (80003d8 <configure_FIFO_WRST+0x34>)
 80003cc:	4619      	mov	r1, r3
 80003ce:	f001 fbb1 	bl	8001b34 <GPIO_Init>

}
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40020400 	.word	0x40020400

080003dc <configure_FIFO_data_lines>:

void configure_FIFO_data_lines() {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80003e2:	2008      	movs	r0, #8
 80003e4:	2101      	movs	r1, #1
 80003e6:	f000 ff13 	bl	8001210 <RCC_AHB1PeriphClockCmd>
  
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80003ea:	2300      	movs	r3, #0
 80003ec:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 80003ee:	2302      	movs	r3, #2
 80003f0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7;
 80003f2:	23ff      	movs	r3, #255	; 0xff
 80003f4:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80003f6:	463b      	mov	r3, r7
 80003f8:	4803      	ldr	r0, [pc, #12]	; (8000408 <configure_FIFO_data_lines+0x2c>)
 80003fa:	4619      	mov	r1, r3
 80003fc:	f001 fb9a 	bl	8001b34 <GPIO_Init>

}
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40020c00 	.word	0x40020c00

0800040c <initCameraClk>:
#include "stm32f4xx_it.h"
#include "camera_peripherals.h"


  
void initCameraClk() {
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0

  /* timer_tick_frequency = TIM4_default_frequency / (prescaler + 1) */
	/* PWM_frequency = timer_tick_frequency / (period + 1) */
	/* period = timer_tick_frequency / PWM_frequency - 1 */

  uint16_t period = 50;
 8000412:	2332      	movs	r3, #50	; 0x32
 8000414:	80fb      	strh	r3, [r7, #6]
  uint16_t prescaler = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	80bb      	strh	r3, [r7, #4]

  configure_GPIO_for_SIOC();
 800041a:	f000 f80d 	bl	8000438 <configure_GPIO_for_SIOC>
  initTim4ForCameraClk(period, prescaler);
 800041e:	88fa      	ldrh	r2, [r7, #6]
 8000420:	88bb      	ldrh	r3, [r7, #4]
 8000422:	4610      	mov	r0, r2
 8000424:	4619      	mov	r1, r3
 8000426:	f000 f829 	bl	800047c <initTim4ForCameraClk>
  initPWMForCameraClk(period);
 800042a:	88fb      	ldrh	r3, [r7, #6]
 800042c:	4618      	mov	r0, r3
 800042e:	f000 f84b 	bl	80004c8 <initPWMForCameraClk>

}
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}

08000438 <configure_GPIO_for_SIOC>:


void configure_GPIO_for_SIOC(void) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
  
  // Configure GPIO port D pin 12 to output 
  // pin to send clk signal to camera

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800043e:	2008      	movs	r0, #8
 8000440:	2101      	movs	r1, #1
 8000442:	f000 fee5 	bl	8001210 <RCC_AHB1PeriphClockCmd>

  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8000446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800044a:	603b      	str	r3, [r7, #0]

  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800044c:	2300      	movs	r3, #0
 800044e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000450:	2301      	movs	r3, #1
 8000452:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000454:	2302      	movs	r3, #2
 8000456:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000458:	2303      	movs	r3, #3
 800045a:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 800045c:	463b      	mov	r3, r7
 800045e:	4806      	ldr	r0, [pc, #24]	; (8000478 <configure_GPIO_for_SIOC+0x40>)
 8000460:	4619      	mov	r1, r3
 8000462:	f001 fb67 	bl	8001b34 <GPIO_Init>

  /* Connect TIM4 pins to  GPIO Port D Pin 12 */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
 8000466:	4804      	ldr	r0, [pc, #16]	; (8000478 <configure_GPIO_for_SIOC+0x40>)
 8000468:	210c      	movs	r1, #12
 800046a:	2202      	movs	r2, #2
 800046c:	f001 fcd0 	bl	8001e10 <GPIO_PinAFConfig>
}
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40020c00 	.word	0x40020c00

0800047c <initTim4ForCameraClk>:
  

void initTim4ForCameraClk(uint16_t period, uint16_t prescaler) {
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	460a      	mov	r2, r1
 8000486:	80fb      	strh	r3, [r7, #6]
 8000488:	4613      	mov	r3, r2
 800048a:	80bb      	strh	r3, [r7, #4]
  
  // Enable APB1 Peripheral Clock for Timer 4
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 800048c:	2004      	movs	r0, #4
 800048e:	2101      	movs	r1, #1
 8000490:	f000 ff18 	bl	80012c4 <RCC_APB1PeriphClockCmd>

  TIM_TimeBaseInitTypeDef timerInitStructure;
  timerInitStructure.TIM_Prescaler = prescaler;
 8000494:	88bb      	ldrh	r3, [r7, #4]
 8000496:	81bb      	strh	r3, [r7, #12]
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000498:	2300      	movs	r3, #0
 800049a:	81fb      	strh	r3, [r7, #14]
  timerInitStructure.TIM_Period = period;
 800049c:	88fb      	ldrh	r3, [r7, #6]
 800049e:	613b      	str	r3, [r7, #16]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	82bb      	strh	r3, [r7, #20]
  timerInitStructure.TIM_RepetitionCounter = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	75bb      	strb	r3, [r7, #22]
  TIM_TimeBaseInit(TIM4, &timerInitStructure);
 80004a8:	f107 030c 	add.w	r3, r7, #12
 80004ac:	4805      	ldr	r0, [pc, #20]	; (80004c4 <initTim4ForCameraClk+0x48>)
 80004ae:	4619      	mov	r1, r3
 80004b0:	f001 fdd4 	bl	800205c <TIM_TimeBaseInit>
  TIM_Cmd(TIM4, ENABLE);
 80004b4:	4803      	ldr	r0, [pc, #12]	; (80004c4 <initTim4ForCameraClk+0x48>)
 80004b6:	2101      	movs	r1, #1
 80004b8:	f001 ff52 	bl	8002360 <TIM_Cmd>

}
 80004bc:	3718      	adds	r7, #24
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40000800 	.word	0x40000800

080004c8 <initPWMForCameraClk>:
  
void initPWMForCameraClk(uint16_t period) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]

  uint16_t pulse;

  /* pulse = ((period + 1) * DutyCycle) / 100 - 1 */

  pulse = ((period + 1) * 50) / 100 - 1;
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	3301      	adds	r3, #1
 80004d6:	2232      	movs	r2, #50	; 0x32
 80004d8:	fb02 f303 	mul.w	r3, r2, r3
 80004dc:	4a10      	ldr	r2, [pc, #64]	; (8000520 <initPWMForCameraClk+0x58>)
 80004de:	fb82 1203 	smull	r1, r2, r2, r3
 80004e2:	1152      	asrs	r2, r2, #5
 80004e4:	17db      	asrs	r3, r3, #31
 80004e6:	1ad3      	subs	r3, r2, r3
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	3b01      	subs	r3, #1
 80004ec:	83fb      	strh	r3, [r7, #30]

  TIM_OCInitTypeDef outputChannelInit;
  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM2;
 80004ee:	2370      	movs	r3, #112	; 0x70
 80004f0:	813b      	strh	r3, [r7, #8]
  outputChannelInit.TIM_Pulse = pulse;
 80004f2:	8bfb      	ldrh	r3, [r7, #30]
 80004f4:	613b      	str	r3, [r7, #16]
  outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
 80004f6:	2301      	movs	r3, #1
 80004f8:	817b      	strh	r3, [r7, #10]
  outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_Low;
 80004fa:	2302      	movs	r3, #2
 80004fc:	82bb      	strh	r3, [r7, #20]

  TIM_OC1Init(TIM4, &outputChannelInit);
 80004fe:	f107 0308 	add.w	r3, r7, #8
 8000502:	4808      	ldr	r0, [pc, #32]	; (8000524 <initPWMForCameraClk+0x5c>)
 8000504:	4619      	mov	r1, r3
 8000506:	f001 ff4b 	bl	80023a0 <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 800050a:	4806      	ldr	r0, [pc, #24]	; (8000524 <initPWMForCameraClk+0x5c>)
 800050c:	2108      	movs	r1, #8
 800050e:	f002 fa5b 	bl	80029c8 <TIM_OC1PreloadConfig>

  TIM_CtrlPWMOutputs(TIM4,ENABLE);
 8000512:	4804      	ldr	r0, [pc, #16]	; (8000524 <initPWMForCameraClk+0x5c>)
 8000514:	2101      	movs	r1, #1
 8000516:	f002 fe87 	bl	8003228 <TIM_CtrlPWMOutputs>

}
 800051a:	3720      	adds	r7, #32
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	51eb851f 	.word	0x51eb851f
 8000524:	40000800 	.word	0x40000800

08000528 <configure_HREF>:

void configure_HREF() {
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800052e:	2002      	movs	r0, #2
 8000530:	2101      	movs	r1, #1
 8000532:	f000 fe6d 	bl	8001210 <RCC_AHB1PeriphClockCmd>
  
  // Configure GPIO Peripherals for input HREF
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000536:	2300      	movs	r3, #0
 8000538:	753b      	strb	r3, [r7, #20]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 800053a:	2302      	movs	r3, #2
 800053c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 800053e:	2301      	movs	r3, #1
 8000540:	613b      	str	r3, [r7, #16]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	4814      	ldr	r0, [pc, #80]	; (8000598 <configure_HREF+0x70>)
 8000548:	4619      	mov	r1, r3
 800054a:	f001 faf3 	bl	8001b34 <GPIO_Init>

  // Enable SysCfg Clock
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800054e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000552:	2101      	movs	r1, #1
 8000554:	f000 fed4 	bl	8001300 <RCC_APB2PeriphClockCmd>

  // connect EXTI line 0 to GPIO port B pin 0
  SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource0);
 8000558:	2001      	movs	r0, #1
 800055a:	2100      	movs	r1, #0
 800055c:	f001 f9e0 	bl	8001920 <SYSCFG_EXTILineConfig>

  // Configure an interrupt line on HREF
  EXTI_InitTypeDef EXTI_InitStructure;
  EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 8000560:	2301      	movs	r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000564:	2300      	movs	r3, #0
 8000566:	733b      	strb	r3, [r7, #12]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8000568:	2308      	movs	r3, #8
 800056a:	737b      	strb	r3, [r7, #13]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800056c:	2301      	movs	r3, #1
 800056e:	73bb      	strb	r3, [r7, #14]
  EXTI_Init(&EXTI_InitStructure);
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	4618      	mov	r0, r3
 8000576:	f001 f8c1 	bl	80016fc <EXTI_Init>

  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 800057a:	2306      	movs	r3, #6
 800057c:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8000582:	2301      	movs	r3, #1
 8000584:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000586:	2301      	movs	r3, #1
 8000588:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	4618      	mov	r0, r3
 800058e:	f003 fa91 	bl	8003ab4 <NVIC_Init>

}
 8000592:	3718      	adds	r7, #24
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40020400 	.word	0x40020400

0800059c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

    //Code to handle the interrupt here
    //Write a 1 to bit i of EXTI_PR
    //This clears interrupt pending flag for EXTI line i
    EXTI->PR |= (0x1<<0);
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <EXTI0_IRQHandler+0x18>)
 80005a2:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <EXTI0_IRQHandler+0x18>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6153      	str	r3, [r2, #20]
}
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	40013c00 	.word	0x40013c00

080005b8 <SYS_Enable_GPIOB_CLK>:

SYS_GPIO_TypeDef * SYS_GPIOB = (SYS_GPIO_TypeDef *)((uint32_t)SYS_GPIOB_ADDR);
SYS_USART_TypeDef * SYS_USART1 = (SYS_USART_TypeDef *)((uint32_t)SYS_USART1_ADDR);

void SYS_Enable_GPIOB_CLK()
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
	volatile uint32_t *AHB1ENR = (uint32_t*)SYS_AHB1ENR_ADDR;
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <SYS_Enable_GPIOB_CLK+0x20>)
 80005c0:	607b      	str	r3, [r7, #4]
	*AHB1ENR |= 1<<1;	//Enable GPIO B
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f043 0202 	orr.w	r2, r3, #2
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	601a      	str	r2, [r3, #0]
}
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	40023830 	.word	0x40023830

080005dc <SYS_Enable_USART1_CLK>:

void SYS_Enable_USART1_CLK()
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
	volatile uint32_t *APB2ENR = (uint32_t*)SYS_APB2ENR_ADDR;
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <SYS_Enable_USART1_CLK+0x20>)
 80005e4:	607b      	str	r3, [r7, #4]
	*APB2ENR |= 1<<4;	//Enable USART 1
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f043 0210 	orr.w	r2, r3, #16
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	601a      	str	r2, [r3, #0]
}
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	40023844 	.word	0x40023844

08000600 <SYS_Config_GPIOB>:

void SYS_Config_GPIOB()
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
	SYS_GPIOB->MODER &= ~(0x3 << (6*2));
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <SYS_Config_GPIOB+0x7c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1c      	ldr	r2, [pc, #112]	; (800067c <SYS_Config_GPIOB+0x7c>)
 800060a:	6812      	ldr	r2, [r2, #0]
 800060c:	6812      	ldr	r2, [r2, #0]
 800060e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000612:	601a      	str	r2, [r3, #0]
	SYS_GPIOB->MODER |= (0x2 << (6*2));
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <SYS_Config_GPIOB+0x7c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a18      	ldr	r2, [pc, #96]	; (800067c <SYS_Config_GPIOB+0x7c>)
 800061a:	6812      	ldr	r2, [r2, #0]
 800061c:	6812      	ldr	r2, [r2, #0]
 800061e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000622:	601a      	str	r2, [r3, #0]

	SYS_GPIOB->OTYPER &= ~(0x1 << 6);
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <SYS_Config_GPIOB+0x7c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a14      	ldr	r2, [pc, #80]	; (800067c <SYS_Config_GPIOB+0x7c>)
 800062a:	6812      	ldr	r2, [r2, #0]
 800062c:	6852      	ldr	r2, [r2, #4]
 800062e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000632:	605a      	str	r2, [r3, #4]

	SYS_GPIOB->OSPEEDR &= ~(0x3 << (6*2));
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <SYS_Config_GPIOB+0x7c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a10      	ldr	r2, [pc, #64]	; (800067c <SYS_Config_GPIOB+0x7c>)
 800063a:	6812      	ldr	r2, [r2, #0]
 800063c:	6892      	ldr	r2, [r2, #8]
 800063e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000642:	609a      	str	r2, [r3, #8]
	SYS_GPIOB->OSPEEDR |= (0x2 << (6*2));
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <SYS_Config_GPIOB+0x7c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a0c      	ldr	r2, [pc, #48]	; (800067c <SYS_Config_GPIOB+0x7c>)
 800064a:	6812      	ldr	r2, [r2, #0]
 800064c:	6892      	ldr	r2, [r2, #8]
 800064e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000652:	609a      	str	r2, [r3, #8]

	SYS_GPIOB->AFRL &= ~(0x7 << (6*4));
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <SYS_Config_GPIOB+0x7c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a08      	ldr	r2, [pc, #32]	; (800067c <SYS_Config_GPIOB+0x7c>)
 800065a:	6812      	ldr	r2, [r2, #0]
 800065c:	6a12      	ldr	r2, [r2, #32]
 800065e:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8000662:	621a      	str	r2, [r3, #32]
	SYS_GPIOB->AFRL |= (0x7 << (6*4));
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <SYS_Config_GPIOB+0x7c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a04      	ldr	r2, [pc, #16]	; (800067c <SYS_Config_GPIOB+0x7c>)
 800066a:	6812      	ldr	r2, [r2, #0]
 800066c:	6a12      	ldr	r2, [r2, #32]
 800066e:	f042 62e0 	orr.w	r2, r2, #117440512	; 0x7000000
 8000672:	621a      	str	r2, [r3, #32]
}
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	20000004 	.word	0x20000004

08000680 <SYS_Config_USART1>:

void SYS_Config_USART1(uint32_t baud)
{
 8000680:	b480      	push	{r7}
 8000682:	b087      	sub	sp, #28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	SYS_USART1->CR1 &= ~(0x1<<12);	//8 data bits
 8000688:	4b50      	ldr	r3, [pc, #320]	; (80007cc <SYS_Config_USART1+0x14c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a4f      	ldr	r2, [pc, #316]	; (80007cc <SYS_Config_USART1+0x14c>)
 800068e:	6812      	ldr	r2, [r2, #0]
 8000690:	8992      	ldrh	r2, [r2, #12]
 8000692:	b292      	uxth	r2, r2
 8000694:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000698:	b292      	uxth	r2, r2
 800069a:	819a      	strh	r2, [r3, #12]
	SYS_USART1->CR1 &= ~(0x1<<10);	//no parity bit
 800069c:	4b4b      	ldr	r3, [pc, #300]	; (80007cc <SYS_Config_USART1+0x14c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a4a      	ldr	r2, [pc, #296]	; (80007cc <SYS_Config_USART1+0x14c>)
 80006a2:	6812      	ldr	r2, [r2, #0]
 80006a4:	8992      	ldrh	r2, [r2, #12]
 80006a6:	b292      	uxth	r2, r2
 80006a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006ac:	b292      	uxth	r2, r2
 80006ae:	819a      	strh	r2, [r3, #12]
	SYS_USART1->CR1 |= (0x1<<3);	//tx enabled
 80006b0:	4b46      	ldr	r3, [pc, #280]	; (80007cc <SYS_Config_USART1+0x14c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a45      	ldr	r2, [pc, #276]	; (80007cc <SYS_Config_USART1+0x14c>)
 80006b6:	6812      	ldr	r2, [r2, #0]
 80006b8:	8992      	ldrh	r2, [r2, #12]
 80006ba:	b292      	uxth	r2, r2
 80006bc:	f042 0208 	orr.w	r2, r2, #8
 80006c0:	b292      	uxth	r2, r2
 80006c2:	819a      	strh	r2, [r3, #12]
	SYS_USART1->CR1 |= (0x1<<2);	//rx enabled
 80006c4:	4b41      	ldr	r3, [pc, #260]	; (80007cc <SYS_Config_USART1+0x14c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a40      	ldr	r2, [pc, #256]	; (80007cc <SYS_Config_USART1+0x14c>)
 80006ca:	6812      	ldr	r2, [r2, #0]
 80006cc:	8992      	ldrh	r2, [r2, #12]
 80006ce:	b292      	uxth	r2, r2
 80006d0:	f042 0204 	orr.w	r2, r2, #4
 80006d4:	b292      	uxth	r2, r2
 80006d6:	819a      	strh	r2, [r3, #12]
	SYS_USART1->CR2 &= ~(0x3<<12);	//1 stop bit
 80006d8:	4b3c      	ldr	r3, [pc, #240]	; (80007cc <SYS_Config_USART1+0x14c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a3b      	ldr	r2, [pc, #236]	; (80007cc <SYS_Config_USART1+0x14c>)
 80006de:	6812      	ldr	r2, [r2, #0]
 80006e0:	8a12      	ldrh	r2, [r2, #16]
 80006e2:	b292      	uxth	r2, r2
 80006e4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80006e8:	b292      	uxth	r2, r2
 80006ea:	821a      	strh	r2, [r3, #16]
	SYS_USART1->CR3 &= ~(0x3<<8);	//hardware flow control disabled
 80006ec:	4b37      	ldr	r3, [pc, #220]	; (80007cc <SYS_Config_USART1+0x14c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a36      	ldr	r2, [pc, #216]	; (80007cc <SYS_Config_USART1+0x14c>)
 80006f2:	6812      	ldr	r2, [r2, #0]
 80006f4:	8a92      	ldrh	r2, [r2, #20]
 80006f6:	b292      	uxth	r2, r2
 80006f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80006fc:	b292      	uxth	r2, r2
 80006fe:	829a      	strh	r2, [r3, #20]

	//baud rate calculations
	uint32_t tmp, integer, fraction;
	if((SYS_USART1->CR1 & (uint16_t)0x8000) != 0)	//8 oversamples
 8000700:	4b32      	ldr	r3, [pc, #200]	; (80007cc <SYS_Config_USART1+0x14c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	899b      	ldrh	r3, [r3, #12]
 8000706:	b29b      	uxth	r3, r3
 8000708:	b29b      	uxth	r3, r3
 800070a:	b21b      	sxth	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	da27      	bge.n	8000760 <SYS_Config_USART1+0xe0>
	{
		tmp = (SYS_PCLK_FREQ*25)/(baud*2);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	4a2e      	ldr	r2, [pc, #184]	; (80007d0 <SYS_Config_USART1+0x150>)
 8000716:	fbb2 f3f3 	udiv	r3, r2, r3
 800071a:	617b      	str	r3, [r7, #20]
		integer = (tmp/100);
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	4a2d      	ldr	r2, [pc, #180]	; (80007d4 <SYS_Config_USART1+0x154>)
 8000720:	fba2 2303 	umull	r2, r3, r2, r3
 8000724:	095b      	lsrs	r3, r3, #5
 8000726:	613b      	str	r3, [r7, #16]
		fraction = (((tmp-(integer*100))*8)+50)/100;
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	2264      	movs	r2, #100	; 0x64
 800072c:	fb02 f303 	mul.w	r3, r2, r3
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	3332      	adds	r3, #50	; 0x32
 8000738:	4a26      	ldr	r2, [pc, #152]	; (80007d4 <SYS_Config_USART1+0x154>)
 800073a:	fba2 2303 	umull	r2, r3, r2, r3
 800073e:	095b      	lsrs	r3, r3, #5
 8000740:	60fb      	str	r3, [r7, #12]
		SYS_USART1->BRR = (integer << 4) | (fraction & (uint8_t)0x7);
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <SYS_Config_USART1+0x14c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	b292      	uxth	r2, r2
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	b291      	uxth	r1, r2
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	b292      	uxth	r2, r2
 8000752:	f002 0207 	and.w	r2, r2, #7
 8000756:	b292      	uxth	r2, r2
 8000758:	430a      	orrs	r2, r1
 800075a:	b292      	uxth	r2, r2
 800075c:	811a      	strh	r2, [r3, #8]
 800075e:	e026      	b.n	80007ae <SYS_Config_USART1+0x12e>
	}
	else	//16 oversamples
	{
		tmp = (SYS_PCLK_FREQ*25)/(baud*4);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4a1a      	ldr	r2, [pc, #104]	; (80007d0 <SYS_Config_USART1+0x150>)
 8000766:	fbb2 f3f3 	udiv	r3, r2, r3
 800076a:	617b      	str	r3, [r7, #20]
		integer = (tmp/100);
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	4a19      	ldr	r2, [pc, #100]	; (80007d4 <SYS_Config_USART1+0x154>)
 8000770:	fba2 2303 	umull	r2, r3, r2, r3
 8000774:	095b      	lsrs	r3, r3, #5
 8000776:	613b      	str	r3, [r7, #16]
		fraction = (((tmp-(integer*100))*16)+50)/100;
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	2264      	movs	r2, #100	; 0x64
 800077c:	fb02 f303 	mul.w	r3, r2, r3
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	3332      	adds	r3, #50	; 0x32
 8000788:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <SYS_Config_USART1+0x154>)
 800078a:	fba2 2303 	umull	r2, r3, r2, r3
 800078e:	095b      	lsrs	r3, r3, #5
 8000790:	60fb      	str	r3, [r7, #12]
		SYS_USART1->BRR = (integer << 4) | (fraction & (uint8_t)0xF);
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <SYS_Config_USART1+0x14c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	693a      	ldr	r2, [r7, #16]
 8000798:	b292      	uxth	r2, r2
 800079a:	0112      	lsls	r2, r2, #4
 800079c:	b291      	uxth	r1, r2
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	b292      	uxth	r2, r2
 80007a2:	f002 020f 	and.w	r2, r2, #15
 80007a6:	b292      	uxth	r2, r2
 80007a8:	430a      	orrs	r2, r1
 80007aa:	b292      	uxth	r2, r2
 80007ac:	811a      	strh	r2, [r3, #8]
	}

	SYS_USART1->CR1 |= (0x1<<13);	//usart1 enabled
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <SYS_Config_USART1+0x14c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a06      	ldr	r2, [pc, #24]	; (80007cc <SYS_Config_USART1+0x14c>)
 80007b4:	6812      	ldr	r2, [r2, #0]
 80007b6:	8992      	ldrh	r2, [r2, #12]
 80007b8:	b292      	uxth	r2, r2
 80007ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80007be:	b292      	uxth	r2, r2
 80007c0:	819a      	strh	r2, [r3, #12]
}
 80007c2:	371c      	adds	r7, #28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	20000008 	.word	0x20000008
 80007d0:	7d2b7500 	.word	0x7d2b7500
 80007d4:	51eb851f 	.word	0x51eb851f

080007d8 <SYS_Init_Debug>:

void SYS_Init_Debug()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	SYS_Enable_GPIOB_CLK();
 80007dc:	f7ff feec 	bl	80005b8 <SYS_Enable_GPIOB_CLK>
	SYS_Enable_USART1_CLK();
 80007e0:	f7ff fefc 	bl	80005dc <SYS_Enable_USART1_CLK>

	SYS_Config_GPIOB();
 80007e4:	f7ff ff0c 	bl	8000600 <SYS_Config_GPIOB>
	SYS_Config_USART1(SYS_USART1_BAUD);
 80007e8:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80007ec:	f7ff ff48 	bl	8000680 <SYS_Config_USART1>
}
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop

080007f4 <SYS_Print>:

int SYS_Print(char * buf, int len)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
	SYS_Init_Debug();
 80007fe:	f7ff ffeb 	bl	80007d8 <SYS_Init_Debug>

	int i;
	for (i=0;i<len;i++)
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	e014      	b.n	8000832 <SYS_Print+0x3e>
	{
		// wait until data register is empty
		while( !(SYS_USART1->SR & 0x00000040) );
 8000808:	bf00      	nop
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <SYS_Print+0x50>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b29b      	uxth	r3, r3
 8000812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000816:	2b00      	cmp	r3, #0
 8000818:	d0f7      	beq.n	800080a <SYS_Print+0x16>
		SYS_USART1->DR = ((char)*buf & 0x01FF);
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <SYS_Print+0x50>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	7812      	ldrb	r2, [r2, #0]
 8000822:	b292      	uxth	r2, r2
 8000824:	809a      	strh	r2, [r3, #4]
		buf++;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	3301      	adds	r3, #1
 800082a:	607b      	str	r3, [r7, #4]
int SYS_Print(char * buf, int len)
{
	SYS_Init_Debug();

	int i;
	for (i=0;i<len;i++)
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3301      	adds	r3, #1
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	429a      	cmp	r2, r3
 8000838:	dbe6      	blt.n	8000808 <SYS_Print+0x14>
		while( !(SYS_USART1->SR & 0x00000040) );
		SYS_USART1->DR = ((char)*buf & 0x01FF);
		buf++;
	}

	return len;
 800083a:	683b      	ldr	r3, [r7, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000008 	.word	0x20000008

08000848 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	_write(1, "exit", 4);
 8000850:	2001      	movs	r0, #1
 8000852:	4902      	ldr	r1, [pc, #8]	; (800085c <_exit+0x14>)
 8000854:	2204      	movs	r2, #4
 8000856:	f000 f917 	bl	8000a88 <_write>
	while (1) {
		;
	}
 800085a:	e7fe      	b.n	800085a <_exit+0x12>
 800085c:	08004780 	.word	0x08004780

08000860 <_close>:
}

int _close(int file) {
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	return -1;
 8000868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <_execve+0x24>)
 8000886:	220c      	movs	r2, #12
 8000888:	601a      	str	r2, [r3, #0]
	return -1;
 800088a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800088e:	4618      	mov	r0, r3
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	200008d0 	.word	0x200008d0

080008a0 <_fork>:
/*
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
	errno = EAGAIN;
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <_fork+0x18>)
 80008a6:	220b      	movs	r2, #11
 80008a8:	601a      	str	r2, [r3, #0]
	return -1;
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	200008d0 	.word	0x200008d0

080008bc <_fstat>:
 fstat
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008cc:	605a      	str	r2, [r3, #4]
	return 0;
 80008ce:	2300      	movs	r3, #0
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <_getpid>:
/*
 getpid
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
	return 1;
 80008e0:	2301      	movs	r3, #1
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <_isatty>:

/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	switch (file) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3300      	adds	r3, #0
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d801      	bhi.n	8000900 <_isatty+0x14>
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	e003      	b.n	8000908 <_isatty+0x1c>
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <_isatty+0x28>)
 8000902:	2209      	movs	r2, #9
 8000904:	601a      	str	r2, [r3, #0]
		return 0;
 8000906:	2300      	movs	r3, #0
	}
}
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	200008d0 	.word	0x200008d0

08000918 <_kill>:

/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <_kill+0x20>)
 8000924:	2216      	movs	r2, #22
 8000926:	601a      	str	r2, [r3, #0]
	return (-1);
 8000928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	200008d0 	.word	0x200008d0

0800093c <_link>:
/*
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <_link+0x20>)
 8000948:	221f      	movs	r2, #31
 800094a:	601a      	str	r2, [r3, #0]
	return -1;
 800094c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	200008d0 	.word	0x200008d0

08000960 <_lseek>:

/*
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
	return 0;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop

0800097c <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <_sbrk+0x60>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d102      	bne.n	8000992 <_sbrk+0x16>
		heap_end = &_ebss;
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <_sbrk+0x60>)
 800098e:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <_sbrk+0x64>)
 8000990:	601a      	str	r2, [r3, #0]
	}
	prev_heap_end = heap_end;
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <_sbrk+0x60>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	60fb      	str	r3, [r7, #12]
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8000998:	f3ef 8308 	mrs	r3, MSP
 800099c:	461c      	mov	r4, r3
  return(result);
 800099e:	4623      	mov	r3, r4

	char * stack = (char*) __get_MSP();
 80009a0:	60bb      	str	r3, [r7, #8]
	if (heap_end + incr > stack) {
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <_sbrk+0x60>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	441a      	add	r2, r3
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d90a      	bls.n	80009c6 <_sbrk+0x4a>
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 80009b0:	2002      	movs	r0, #2
 80009b2:	490c      	ldr	r1, [pc, #48]	; (80009e4 <_sbrk+0x68>)
 80009b4:	2219      	movs	r2, #25
 80009b6:	f000 f867 	bl	8000a88 <_write>
		errno = ENOMEM;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <_sbrk+0x6c>)
 80009bc:	220c      	movs	r2, #12
 80009be:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80009c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009c4:	e006      	b.n	80009d4 <_sbrk+0x58>
		//abort ();
	}

	heap_end += incr;
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <_sbrk+0x60>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a03      	ldr	r2, [pc, #12]	; (80009dc <_sbrk+0x60>)
 80009d0:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80009d2:	68fb      	ldr	r3, [r7, #12]

}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd90      	pop	{r4, r7, pc}
 80009dc:	20000898 	.word	0x20000898
 80009e0:	200008d4 	.word	0x200008d4
 80009e4:	08004788 	.word	0x08004788
 80009e8:	200008d0 	.word	0x200008d0

080009ec <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
	return -1;
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <_stat>:
 stat
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a18:	605a      	str	r2, [r3, #4]
	return 0;
 8000a1a:	2300      	movs	r3, #0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_times>:
/*
 times
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	return -1;
 8000a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <_unlink>:

/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <_unlink+0x20>)
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	601a      	str	r2, [r3, #0]
	return -1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	200008d0 	.word	0x200008d0

08000a64 <_wait>:

/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <_wait+0x20>)
 8000a6e:	220a      	movs	r2, #10
 8000a70:	601a      	str	r2, [r3, #0]
	return -1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	200008d0 	.word	0x200008d0

08000a88 <_write>:
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
	switch (file) {
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d002      	beq.n	8000aa0 <_write+0x18>
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d006      	beq.n	8000aac <_write+0x24>
 8000a9e:	e00b      	b.n	8000ab8 <_write+0x30>
	case STDOUT_FILENO: /*stdout*/
		len = SYS_Print(ptr, len);
 8000aa0:	68b8      	ldr	r0, [r7, #8]
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	f7ff fea6 	bl	80007f4 <SYS_Print>
 8000aa8:	6078      	str	r0, [r7, #4]
		break;
 8000aaa:	e00b      	b.n	8000ac4 <_write+0x3c>
	case STDERR_FILENO: /* stderr */
		len = SYS_Print(ptr, len);
 8000aac:	68b8      	ldr	r0, [r7, #8]
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f7ff fea0 	bl	80007f4 <SYS_Print>
 8000ab4:	6078      	str	r0, [r7, #4]
		break;
 8000ab6:	e005      	b.n	8000ac4 <_write+0x3c>
	default:
		errno = EBADF;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <_write+0x48>)
 8000aba:	2209      	movs	r2, #9
 8000abc:	601a      	str	r2, [r3, #0]
		return -1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ac2:	e000      	b.n	8000ac6 <_write+0x3e>
	}
	return len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200008d0 	.word	0x200008d0

08000ad4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad8:	4a15      	ldr	r2, [pc, #84]	; (8000b30 <SystemInit+0x5c>)
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <SystemInit+0x5c>)
 8000adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ae8:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <SystemInit+0x60>)
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <SystemInit+0x60>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <SystemInit+0x60>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000afa:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <SystemInit+0x60>)
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <SystemInit+0x60>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <SystemInit+0x60>)
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <SystemInit+0x64>)
 8000b0e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b10:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <SystemInit+0x60>)
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <SystemInit+0x60>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <SystemInit+0x60>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000b22:	f000 f869 	bl	8000bf8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b26:	4b02      	ldr	r3, [pc, #8]	; (8000b30 <SystemInit+0x5c>)
 8000b28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b2c:	609a      	str	r2, [r3, #8]
#endif
}
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	e000ed00 	.word	0xe000ed00
 8000b34:	40023800 	.word	0x40023800
 8000b38:	24003010 	.word	0x24003010

08000b3c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b087      	sub	sp, #28
 8000b40:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	2302      	movs	r3, #2
 8000b54:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b56:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <SystemCoreClockUpdate+0xa8>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	f003 030c 	and.w	r3, r3, #12
 8000b5e:	617b      	str	r3, [r7, #20]

  switch (tmp)
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	d007      	beq.n	8000b76 <SystemCoreClockUpdate+0x3a>
 8000b66:	2b08      	cmp	r3, #8
 8000b68:	d009      	beq.n	8000b7e <SystemCoreClockUpdate+0x42>
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d121      	bne.n	8000bb2 <SystemCoreClockUpdate+0x76>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <SystemCoreClockUpdate+0xac>)
 8000b70:	4a1e      	ldr	r2, [pc, #120]	; (8000bec <SystemCoreClockUpdate+0xb0>)
 8000b72:	601a      	str	r2, [r3, #0]
      break;
 8000b74:	e021      	b.n	8000bba <SystemCoreClockUpdate+0x7e>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <SystemCoreClockUpdate+0xac>)
 8000b78:	4a1d      	ldr	r2, [pc, #116]	; (8000bf0 <SystemCoreClockUpdate+0xb4>)
 8000b7a:	601a      	str	r2, [r3, #0]
      break;
 8000b7c:	e01d      	b.n	8000bba <SystemCoreClockUpdate+0x7e>
    case 0x08:  /* PLL used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <SystemCoreClockUpdate+0xa8>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b86:	0d9b      	lsrs	r3, r3, #22
 8000b88:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <SystemCoreClockUpdate+0xa8>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b92:	607b      	str	r3, [r7, #4]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <SystemCoreClockUpdate+0xa8>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b9c:	0c1b      	lsrs	r3, r3, #16
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bac:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <SystemCoreClockUpdate+0xac>)
 8000bae:	6013      	str	r3, [r2, #0]
      break;
 8000bb0:	e003      	b.n	8000bba <SystemCoreClockUpdate+0x7e>
    default:
      SystemCoreClock = HSI_VALUE;
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <SystemCoreClockUpdate+0xac>)
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <SystemCoreClockUpdate+0xb0>)
 8000bb6:	601a      	str	r2, [r3, #0]
      break;
 8000bb8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <SystemCoreClockUpdate+0xa8>)
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bc2:	091b      	lsrs	r3, r3, #4
 8000bc4:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <SystemCoreClockUpdate+0xb8>)
 8000bc6:	5cd3      	ldrb	r3, [r2, r3]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	617b      	str	r3, [r7, #20]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <SystemCoreClockUpdate+0xac>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <SystemCoreClockUpdate+0xac>)
 8000bd8:	6013      	str	r3, [r2, #0]
}
 8000bda:	371c      	adds	r7, #28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	40023800 	.word	0x40023800
 8000be8:	20000010 	.word	0x20000010
 8000bec:	00f42400 	.word	0x00f42400
 8000bf0:	007a1200 	.word	0x007a1200
 8000bf4:	20000014 	.word	0x20000014

08000bf8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx */  
}
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <delay_us>:
#include "delay.h"

void delay_us(unsigned int i) {     
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  while( i--) {}
 8000c0c:	bf00      	nop
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	1e5a      	subs	r2, r3, #1
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1fa      	bne.n	8000c0e <delay_us+0xa>
}		  
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop

08000c24 <delay_ms>:

void delay_ms(unsigned int time) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  while(time--) {	
 8000c2c:	e003      	b.n	8000c36 <delay_ms+0x12>
    delay_us(1000);
 8000c2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c32:	f7ff ffe7 	bl	8000c04 <delay_us>
void delay_us(unsigned int i) {     
  while( i--) {}
}		  

void delay_ms(unsigned int time) {
  while(time--) {	
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	1e5a      	subs	r2, r3, #1
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1f6      	bne.n	8000c2e <delay_ms+0xa>
    delay_us(1000);
  }
}
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop

08000c48 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c4c:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <RCC_DeInit+0x48>)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <RCC_DeInit+0x48>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c58:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <RCC_DeInit+0x48>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c5e:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <RCC_DeInit+0x48>)
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <RCC_DeInit+0x48>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <RCC_DeInit+0x48>)
 8000c70:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <RCC_DeInit+0x4c>)
 8000c72:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c74:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <RCC_DeInit+0x48>)
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <RCC_DeInit+0x48>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <RCC_DeInit+0x48>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
}
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800
 8000c94:	24003010 	.word	0x24003010

08000c98 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <RCC_HSEConfig+0x20>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000ca8:	4a03      	ldr	r2, [pc, #12]	; (8000cb8 <RCC_HSEConfig+0x20>)
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	7013      	strb	r3, [r2, #0]
}
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	40023802 	.word	0x40023802

08000cbc <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000cce:	2031      	movs	r0, #49	; 0x31
 8000cd0:	f000 fc86 	bl	80015e0 <RCC_GetFlagStatus>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000ce4:	d002      	beq.n	8000cec <RCC_WaitForHSEStartUp+0x30>
 8000ce6:	79bb      	ldrb	r3, [r7, #6]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f0      	beq.n	8000cce <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000cec:	2031      	movs	r0, #49	; 0x31
 8000cee:	f000 fc77 	bl	80015e0 <RCC_GetFlagStatus>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	71fb      	strb	r3, [r7, #7]
 8000cfc:	e001      	b.n	8000d02 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <RCC_AdjustHSICalibrationValue+0x38>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d26:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 8000d32:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <RCC_AdjustHSICalibrationValue+0x38>)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800

08000d48 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <RCC_HSICmd+0x1c>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	42470000 	.word	0x42470000

08000d68 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <RCC_LSEConfig+0x3c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <RCC_LSEConfig+0x3c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d002      	beq.n	8000d8a <RCC_LSEConfig+0x22>
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d004      	beq.n	8000d92 <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 8000d88:	e007      	b.n	8000d9a <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <RCC_LSEConfig+0x3c>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
      break;
 8000d90:	e003      	b.n	8000d9a <RCC_LSEConfig+0x32>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <RCC_LSEConfig+0x3c>)
 8000d94:	2205      	movs	r2, #5
 8000d96:	701a      	strb	r2, [r3, #0]
      break;
 8000d98:	bf00      	nop
    default:
      break;
  }
}
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	40023870 	.word	0x40023870

08000da8 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <RCC_LSICmd+0x1c>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	42470e80 	.word	0x42470e80

08000dc8 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000dd6:	490a      	ldr	r1, [pc, #40]	; (8000e00 <RCC_PLLConfig+0x38>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	019a      	lsls	r2, r3, #6
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	431a      	orrs	r2, r3
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	085b      	lsrs	r3, r3, #1
 8000de4:	3b01      	subs	r3, #1
 8000de6:	041b      	lsls	r3, r3, #16
 8000de8:	431a      	orrs	r2, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	431a      	orrs	r2, r3
                 (PLLQ << 24);
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	061b      	lsls	r3, r3, #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000df2:	4313      	orrs	r3, r2
 8000df4:	604b      	str	r3, [r1, #4]
                 (PLLQ << 24);
}
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	40023800 	.word	0x40023800

08000e04 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <RCC_PLLCmd+0x1c>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	42470060 	.word	0x42470060

08000e24 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8000e2e:	4906      	ldr	r1, [pc, #24]	; (8000e48 <RCC_PLLI2SConfig+0x24>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	019a      	lsls	r2, r3, #6
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	071b      	lsls	r3, r3, #28
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	40023800 	.word	0x40023800

08000e4c <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8000e56:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <RCC_PLLI2SCmd+0x1c>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	42470068 	.word	0x42470068

08000e6c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <RCC_ClockSecuritySystemCmd+0x1c>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	4247004c 	.word	0x4247004c

08000e8c <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <RCC_MCO1Config+0x38>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8000ea6:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000eb4:	4a03      	ldr	r2, [pc, #12]	; (8000ec4 <RCC_MCO1Config+0x38>)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6093      	str	r3, [r2, #8]
}
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <RCC_MCO2Config+0x38>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8000ee2:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000ef0:	4a03      	ldr	r2, [pc, #12]	; (8000f00 <RCC_MCO2Config+0x38>)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6093      	str	r3, [r2, #8]
}
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	40023800 	.word	0x40023800

08000f04 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <RCC_SYSCLKConfig+0x34>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f023 0303 	bic.w	r3, r3, #3
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <RCC_SYSCLKConfig+0x34>)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6093      	str	r3, [r2, #8]
}
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800

08000f3c <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <RCC_GetSYSCLKSource+0x1c>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f003 030c 	and.w	r3, r3, #12
 8000f4a:	b2db      	uxtb	r3, r3
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800

08000f5c <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <RCC_HCLKConfig+0x34>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <RCC_HCLKConfig+0x34>)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6093      	str	r3, [r2, #8]
}
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800

08000f94 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <RCC_PCLK1Config+0x34>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <RCC_PCLK1Config+0x34>)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6093      	str	r3, [r2, #8]
}
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800

08000fcc <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <RCC_PCLK2Config+0x34>)
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000ff0:	4a03      	ldr	r2, [pc, #12]	; (8001000 <RCC_PCLK2Config+0x34>)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6093      	str	r3, [r2, #8]
}
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	40023800 	.word	0x40023800

08001004 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	2302      	movs	r3, #2
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	2302      	movs	r3, #2
 8001022:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001024:	4b48      	ldr	r3, [pc, #288]	; (8001148 <RCC_GetClocksFreq+0x144>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 030c 	and.w	r3, r3, #12
 800102c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	2b04      	cmp	r3, #4
 8001032:	d007      	beq.n	8001044 <RCC_GetClocksFreq+0x40>
 8001034:	2b08      	cmp	r3, #8
 8001036:	d009      	beq.n	800104c <RCC_GetClocksFreq+0x48>
 8001038:	2b00      	cmp	r3, #0
 800103a:	d13f      	bne.n	80010bc <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a43      	ldr	r2, [pc, #268]	; (800114c <RCC_GetClocksFreq+0x148>)
 8001040:	601a      	str	r2, [r3, #0]
      break;
 8001042:	e03f      	b.n	80010c4 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a42      	ldr	r2, [pc, #264]	; (8001150 <RCC_GetClocksFreq+0x14c>)
 8001048:	601a      	str	r2, [r3, #0]
      break;
 800104a:	e03b      	b.n	80010c4 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800104c:	4b3e      	ldr	r3, [pc, #248]	; (8001148 <RCC_GetClocksFreq+0x144>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001054:	0d9b      	lsrs	r3, r3, #22
 8001056:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001058:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <RCC_GetClocksFreq+0x144>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001060:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00d      	beq.n	8001084 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001068:	4a39      	ldr	r2, [pc, #228]	; (8001150 <RCC_GetClocksFreq+0x14c>)
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001070:	4b35      	ldr	r3, [pc, #212]	; (8001148 <RCC_GetClocksFreq+0x144>)
 8001072:	6859      	ldr	r1, [r3, #4]
 8001074:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001078:	400b      	ands	r3, r1
 800107a:	099b      	lsrs	r3, r3, #6
 800107c:	fb03 f302 	mul.w	r3, r3, r2
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	e00c      	b.n	800109e <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001084:	4a31      	ldr	r2, [pc, #196]	; (800114c <RCC_GetClocksFreq+0x148>)
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	fbb2 f2f3 	udiv	r2, r2, r3
 800108c:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <RCC_GetClocksFreq+0x144>)
 800108e:	6859      	ldr	r1, [r3, #4]
 8001090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001094:	400b      	ands	r3, r1
 8001096:	099b      	lsrs	r3, r3, #6
 8001098:	fb03 f302 	mul.w	r3, r3, r2
 800109c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800109e:	4b2a      	ldr	r3, [pc, #168]	; (8001148 <RCC_GetClocksFreq+0x144>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010a6:	0c1b      	lsrs	r3, r3, #16
 80010a8:	3301      	adds	r3, #1
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	601a      	str	r2, [r3, #0]
      break;
 80010ba:	e003      	b.n	80010c4 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a23      	ldr	r2, [pc, #140]	; (800114c <RCC_GetClocksFreq+0x148>)
 80010c0:	601a      	str	r2, [r3, #0]
      break;
 80010c2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <RCC_GetClocksFreq+0x144>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010cc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80010d4:	4a1f      	ldr	r2, [pc, #124]	; (8001154 <RCC_GetClocksFreq+0x150>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	4413      	add	r3, r2
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	40da      	lsrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <RCC_GetClocksFreq+0x144>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80010f4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	0a9b      	lsrs	r3, r3, #10
 80010fa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80010fc:	4a15      	ldr	r2, [pc, #84]	; (8001154 <RCC_GetClocksFreq+0x150>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	40da      	lsrs	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <RCC_GetClocksFreq+0x144>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800111c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	0b5b      	lsrs	r3, r3, #13
 8001122:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <RCC_GetClocksFreq+0x150>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	4413      	add	r3, r2
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	40da      	lsrs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	60da      	str	r2, [r3, #12]
}
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	00f42400 	.word	0x00f42400
 8001150:	007a1200 	.word	0x007a1200
 8001154:	20000024 	.word	0x20000024

08001158 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800116a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800116e:	d111      	bne.n	8001194 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <RCC_RTCCLKConfig+0x58>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800117c:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4313      	orrs	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <RCC_RTCCLKConfig+0x58>)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6093      	str	r3, [r2, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8001194:	4906      	ldr	r1, [pc, #24]	; (80011b0 <RCC_RTCCLKConfig+0x58>)
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <RCC_RTCCLKConfig+0x58>)
 8001198:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a0:	4313      	orrs	r3, r2
 80011a2:	670b      	str	r3, [r1, #112]	; 0x70
}
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800

080011b4 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80011be:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <RCC_RTCCLKCmd+0x1c>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	6013      	str	r3, [r2, #0]
}
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	42470e3c 	.word	0x42470e3c

080011d4 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <RCC_BackupResetCmd+0x1c>)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	42470e40 	.word	0x42470e40

080011f4 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 80011fc:	4a03      	ldr	r2, [pc, #12]	; (800120c <RCC_I2SCLKConfig+0x18>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
}
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	4247015c 	.word	0x4247015c

08001210 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d006      	beq.n	8001230 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001222:	4909      	ldr	r1, [pc, #36]	; (8001248 <RCC_AHB1PeriphClockCmd+0x38>)
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <RCC_AHB1PeriphClockCmd+0x38>)
 8001226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4313      	orrs	r3, r2
 800122c:	630b      	str	r3, [r1, #48]	; 0x30
 800122e:	e006      	b.n	800123e <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001230:	4905      	ldr	r1, [pc, #20]	; (8001248 <RCC_AHB1PeriphClockCmd+0x38>)
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <RCC_AHB1PeriphClockCmd+0x38>)
 8001234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	43db      	mvns	r3, r3
 800123a:	4013      	ands	r3, r2
 800123c:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	40023800 	.word	0x40023800

0800124c <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d006      	beq.n	800126c <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800125e:	4909      	ldr	r1, [pc, #36]	; (8001284 <RCC_AHB2PeriphClockCmd+0x38>)
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <RCC_AHB2PeriphClockCmd+0x38>)
 8001262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4313      	orrs	r3, r2
 8001268:	634b      	str	r3, [r1, #52]	; 0x34
 800126a:	e006      	b.n	800127a <RCC_AHB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800126c:	4905      	ldr	r1, [pc, #20]	; (8001284 <RCC_AHB2PeriphClockCmd+0x38>)
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <RCC_AHB2PeriphClockCmd+0x38>)
 8001270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	43db      	mvns	r3, r3
 8001276:	4013      	ands	r3, r2
 8001278:	634b      	str	r3, [r1, #52]	; 0x34
  }
}
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	40023800 	.word	0x40023800

08001288 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d006      	beq.n	80012a8 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800129a:	4909      	ldr	r1, [pc, #36]	; (80012c0 <RCC_AHB3PeriphClockCmd+0x38>)
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <RCC_AHB3PeriphClockCmd+0x38>)
 800129e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	638b      	str	r3, [r1, #56]	; 0x38
 80012a6:	e006      	b.n	80012b6 <RCC_AHB3PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 80012a8:	4905      	ldr	r1, [pc, #20]	; (80012c0 <RCC_AHB3PeriphClockCmd+0x38>)
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <RCC_AHB3PeriphClockCmd+0x38>)
 80012ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	4013      	ands	r3, r2
 80012b4:	638b      	str	r3, [r1, #56]	; 0x38
  }
}
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40023800 	.word	0x40023800

080012c4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80012d6:	4909      	ldr	r1, [pc, #36]	; (80012fc <RCC_APB1PeriphClockCmd+0x38>)
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <RCC_APB1PeriphClockCmd+0x38>)
 80012da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4313      	orrs	r3, r2
 80012e0:	640b      	str	r3, [r1, #64]	; 0x40
 80012e2:	e006      	b.n	80012f2 <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80012e4:	4905      	ldr	r1, [pc, #20]	; (80012fc <RCC_APB1PeriphClockCmd+0x38>)
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <RCC_APB1PeriphClockCmd+0x38>)
 80012e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	4013      	ands	r3, r2
 80012f0:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40023800 	.word	0x40023800

08001300 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800130c:	78fb      	ldrb	r3, [r7, #3]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d006      	beq.n	8001320 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001312:	4909      	ldr	r1, [pc, #36]	; (8001338 <RCC_APB2PeriphClockCmd+0x38>)
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <RCC_APB2PeriphClockCmd+0x38>)
 8001316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4313      	orrs	r3, r2
 800131c:	644b      	str	r3, [r1, #68]	; 0x44
 800131e:	e006      	b.n	800132e <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001320:	4905      	ldr	r1, [pc, #20]	; (8001338 <RCC_APB2PeriphClockCmd+0x38>)
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <RCC_APB2PeriphClockCmd+0x38>)
 8001324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	43db      	mvns	r3, r3
 800132a:	4013      	ands	r3, r2
 800132c:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	40023800 	.word	0x40023800

0800133c <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d006      	beq.n	800135c <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800134e:	4909      	ldr	r1, [pc, #36]	; (8001374 <RCC_AHB1PeriphResetCmd+0x38>)
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <RCC_AHB1PeriphResetCmd+0x38>)
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4313      	orrs	r3, r2
 8001358:	610b      	str	r3, [r1, #16]
 800135a:	e006      	b.n	800136a <RCC_AHB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 800135c:	4905      	ldr	r1, [pc, #20]	; (8001374 <RCC_AHB1PeriphResetCmd+0x38>)
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <RCC_AHB1PeriphResetCmd+0x38>)
 8001360:	691a      	ldr	r2, [r3, #16]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	43db      	mvns	r3, r3
 8001366:	4013      	ands	r3, r2
 8001368:	610b      	str	r3, [r1, #16]
  }
}
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	40023800 	.word	0x40023800

08001378 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 800138a:	4909      	ldr	r1, [pc, #36]	; (80013b0 <RCC_AHB2PeriphResetCmd+0x38>)
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <RCC_AHB2PeriphResetCmd+0x38>)
 800138e:	695a      	ldr	r2, [r3, #20]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4313      	orrs	r3, r2
 8001394:	614b      	str	r3, [r1, #20]
 8001396:	e006      	b.n	80013a6 <RCC_AHB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8001398:	4905      	ldr	r1, [pc, #20]	; (80013b0 <RCC_AHB2PeriphResetCmd+0x38>)
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <RCC_AHB2PeriphResetCmd+0x38>)
 800139c:	695a      	ldr	r2, [r3, #20]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	4013      	ands	r3, r2
 80013a4:	614b      	str	r3, [r1, #20]
  }
}
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	40023800 	.word	0x40023800

080013b4 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80013c6:	4909      	ldr	r1, [pc, #36]	; (80013ec <RCC_AHB3PeriphResetCmd+0x38>)
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <RCC_AHB3PeriphResetCmd+0x38>)
 80013ca:	699a      	ldr	r2, [r3, #24]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	618b      	str	r3, [r1, #24]
 80013d2:	e006      	b.n	80013e2 <RCC_AHB3PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 80013d4:	4905      	ldr	r1, [pc, #20]	; (80013ec <RCC_AHB3PeriphResetCmd+0x38>)
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <RCC_AHB3PeriphResetCmd+0x38>)
 80013d8:	699a      	ldr	r2, [r3, #24]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	43db      	mvns	r3, r3
 80013de:	4013      	ands	r3, r2
 80013e0:	618b      	str	r3, [r1, #24]
  }
}
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40023800 	.word	0x40023800

080013f0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d006      	beq.n	8001410 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001402:	4909      	ldr	r1, [pc, #36]	; (8001428 <RCC_APB1PeriphResetCmd+0x38>)
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <RCC_APB1PeriphResetCmd+0x38>)
 8001406:	6a1a      	ldr	r2, [r3, #32]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4313      	orrs	r3, r2
 800140c:	620b      	str	r3, [r1, #32]
 800140e:	e006      	b.n	800141e <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001410:	4905      	ldr	r1, [pc, #20]	; (8001428 <RCC_APB1PeriphResetCmd+0x38>)
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <RCC_APB1PeriphResetCmd+0x38>)
 8001414:	6a1a      	ldr	r2, [r3, #32]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	43db      	mvns	r3, r3
 800141a:	4013      	ands	r3, r2
 800141c:	620b      	str	r3, [r1, #32]
  }
}
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	40023800 	.word	0x40023800

0800142c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800143e:	4909      	ldr	r1, [pc, #36]	; (8001464 <RCC_APB2PeriphResetCmd+0x38>)
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <RCC_APB2PeriphResetCmd+0x38>)
 8001442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4313      	orrs	r3, r2
 8001448:	624b      	str	r3, [r1, #36]	; 0x24
 800144a:	e006      	b.n	800145a <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800144c:	4905      	ldr	r1, [pc, #20]	; (8001464 <RCC_APB2PeriphResetCmd+0x38>)
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <RCC_APB2PeriphResetCmd+0x38>)
 8001450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	43db      	mvns	r3, r3
 8001456:	4013      	ands	r3, r2
 8001458:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	40023800 	.word	0x40023800

08001468 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d006      	beq.n	8001488 <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800147a:	4909      	ldr	r1, [pc, #36]	; (80014a0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800147e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4313      	orrs	r3, r2
 8001484:	650b      	str	r3, [r1, #80]	; 0x50
 8001486:	e006      	b.n	8001496 <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8001488:	4905      	ldr	r1, [pc, #20]	; (80014a0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800148c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	43db      	mvns	r3, r3
 8001492:	4013      	ands	r3, r2
 8001494:	650b      	str	r3, [r1, #80]	; 0x50
  }
}
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40023800 	.word	0x40023800

080014a4 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d006      	beq.n	80014c4 <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 80014b6:	4909      	ldr	r1, [pc, #36]	; (80014dc <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 80014ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4313      	orrs	r3, r2
 80014c0:	654b      	str	r3, [r1, #84]	; 0x54
 80014c2:	e006      	b.n	80014d2 <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 80014c4:	4905      	ldr	r1, [pc, #20]	; (80014dc <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 80014c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	4013      	ands	r3, r2
 80014d0:	654b      	str	r3, [r1, #84]	; 0x54
  }
}
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40023800 	.word	0x40023800

080014e0 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d006      	beq.n	8001500 <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 80014f2:	4909      	ldr	r1, [pc, #36]	; (8001518 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 80014f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	658b      	str	r3, [r1, #88]	; 0x58
 80014fe:	e006      	b.n	800150e <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8001500:	4905      	ldr	r1, [pc, #20]	; (8001518 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 8001504:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	43db      	mvns	r3, r3
 800150a:	4013      	ands	r3, r2
 800150c:	658b      	str	r3, [r1, #88]	; 0x58
  }
}
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	40023800 	.word	0x40023800

0800151c <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001528:	78fb      	ldrb	r3, [r7, #3]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d006      	beq.n	800153c <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800152e:	4909      	ldr	r1, [pc, #36]	; (8001554 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8001532:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4313      	orrs	r3, r2
 8001538:	660b      	str	r3, [r1, #96]	; 0x60
 800153a:	e006      	b.n	800154a <RCC_APB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800153c:	4905      	ldr	r1, [pc, #20]	; (8001554 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <RCC_APB1PeriphClockLPModeCmd+0x38>)
 8001540:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	43db      	mvns	r3, r3
 8001546:	4013      	ands	r3, r2
 8001548:	660b      	str	r3, [r1, #96]	; 0x60
  }
}
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40023800 	.word	0x40023800

08001558 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d006      	beq.n	8001578 <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800156a:	4909      	ldr	r1, [pc, #36]	; (8001590 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800156e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4313      	orrs	r3, r2
 8001574:	664b      	str	r3, [r1, #100]	; 0x64
 8001576:	e006      	b.n	8001586 <RCC_APB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8001578:	4905      	ldr	r1, [pc, #20]	; (8001590 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800157c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	43db      	mvns	r3, r3
 8001582:	4013      	ands	r3, r2
 8001584:	664b      	str	r3, [r1, #100]	; 0x64
  }
}
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	40023800 	.word	0x40023800

08001594 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	460a      	mov	r2, r1
 800159e:	71fb      	strb	r3, [r7, #7]
 80015a0:	4613      	mov	r3, r2
 80015a2:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015a4:	79bb      	ldrb	r3, [r7, #6]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d008      	beq.n	80015bc <RCC_ITConfig+0x28>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80015aa:	490c      	ldr	r1, [pc, #48]	; (80015dc <RCC_ITConfig+0x48>)
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <RCC_ITConfig+0x48>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	700b      	strb	r3, [r1, #0]
 80015ba:	e009      	b.n	80015d0 <RCC_ITConfig+0x3c>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80015bc:	4907      	ldr	r1, [pc, #28]	; (80015dc <RCC_ITConfig+0x48>)
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <RCC_ITConfig+0x48>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4013      	ands	r3, r2
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	700b      	strb	r3, [r1, #0]
  }
}
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	4002380d 	.word	0x4002380d

080015e0 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	095b      	lsrs	r3, r3, #5
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d103      	bne.n	800160c <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <RCC_GetFlagStatus+0x70>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	e009      	b.n	8001620 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d103      	bne.n	800161a <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <RCC_GetFlagStatus+0x70>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	e002      	b.n	8001620 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <RCC_GetFlagStatus+0x70>)
 800161c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800161e:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	f003 031f 	and.w	r3, r3, #31
 8001626:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	fa22 f303 	lsr.w	r3, r2, r3
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8001638:	2301      	movs	r3, #1
 800163a:	74fb      	strb	r3, [r7, #19]
 800163c:	e001      	b.n	8001642 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8001642:	7cfb      	ldrb	r3, [r7, #19]
}
 8001644:	4618      	mov	r0, r3
 8001646:	371c      	adds	r7, #28
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40023800 	.word	0x40023800

08001654 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <RCC_ClearFlag+0x18>)
 800165a:	4b04      	ldr	r3, [pc, #16]	; (800166c <RCC_ClearFlag+0x18>)
 800165c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800165e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001662:	6753      	str	r3, [r2, #116]	; 0x74
}
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	40023800 	.word	0x40023800

08001670 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <RCC_GetITStatus+0x34>)
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	4013      	ands	r3, r2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d002      	beq.n	8001690 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 800168a:	2301      	movs	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	e001      	b.n	8001694 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8001694:	7bfb      	ldrb	r3, [r7, #15]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800

080016a8 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 80016b2:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <RCC_ClearITPendingBit+0x1c>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	7013      	strb	r3, [r2, #0]
}
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	4002380e 	.word	0x4002380e

080016c8 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <EXTI_DeInit+0x2c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <EXTI_DeInit+0x2c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <EXTI_DeInit+0x2c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <EXTI_DeInit+0x2c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <EXTI_DeInit+0x2c>)
 80016e6:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <EXTI_DeInit+0x30>)
 80016e8:	615a      	str	r2, [r3, #20]
}
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40013c00 	.word	0x40013c00
 80016f8:	007fffff 	.word	0x007fffff

080016fc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8001708:	4b34      	ldr	r3, [pc, #208]	; (80017dc <EXTI_Init+0xe0>)
 800170a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	799b      	ldrb	r3, [r3, #6]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d04f      	beq.n	80017b4 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001714:	4931      	ldr	r1, [pc, #196]	; (80017dc <EXTI_Init+0xe0>)
 8001716:	4b31      	ldr	r3, [pc, #196]	; (80017dc <EXTI_Init+0xe0>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	43db      	mvns	r3, r3
 8001720:	4013      	ands	r3, r2
 8001722:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001724:	492d      	ldr	r1, [pc, #180]	; (80017dc <EXTI_Init+0xe0>)
 8001726:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <EXTI_Init+0xe0>)
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	43db      	mvns	r3, r3
 8001730:	4013      	ands	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	791b      	ldrb	r3, [r3, #4]
 8001738:	461a      	mov	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4413      	add	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	6811      	ldr	r1, [r2, #0]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800174e:	4923      	ldr	r1, [pc, #140]	; (80017dc <EXTI_Init+0xe0>)
 8001750:	4b22      	ldr	r3, [pc, #136]	; (80017dc <EXTI_Init+0xe0>)
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	43db      	mvns	r3, r3
 800175a:	4013      	ands	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800175e:	491f      	ldr	r1, [pc, #124]	; (80017dc <EXTI_Init+0xe0>)
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <EXTI_Init+0xe0>)
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	43db      	mvns	r3, r3
 800176a:	4013      	ands	r3, r2
 800176c:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	795b      	ldrb	r3, [r3, #5]
 8001772:	2b10      	cmp	r3, #16
 8001774:	d10e      	bne.n	8001794 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8001776:	4919      	ldr	r1, [pc, #100]	; (80017dc <EXTI_Init+0xe0>)
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <EXTI_Init+0xe0>)
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4313      	orrs	r3, r2
 8001782:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001784:	4915      	ldr	r1, [pc, #84]	; (80017dc <EXTI_Init+0xe0>)
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <EXTI_Init+0xe0>)
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4313      	orrs	r3, r2
 8001790:	60cb      	str	r3, [r1, #12]
 8001792:	e01d      	b.n	80017d0 <EXTI_Init+0xd4>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <EXTI_Init+0xe0>)
 8001796:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	795b      	ldrb	r3, [r3, #5]
 800179c:	461a      	mov	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4413      	add	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	6811      	ldr	r1, [r2, #0]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	e00d      	b.n	80017d0 <EXTI_Init+0xd4>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	791b      	ldrb	r3, [r3, #4]
 80017b8:	461a      	mov	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4413      	add	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	6811      	ldr	r1, [r2, #0]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	43d2      	mvns	r2, r2
 80017cc:	400a      	ands	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]
  }
}
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40013c00 	.word	0x40013c00

080017e0 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	220c      	movs	r2, #12
 80017f8:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	719a      	strb	r2, [r3, #6]
}
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop

0800180c <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8001814:	4905      	ldr	r1, [pc, #20]	; (800182c <EXTI_GenerateSWInterrupt+0x20>)
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <EXTI_GenerateSWInterrupt+0x20>)
 8001818:	691a      	ldr	r2, [r3, #16]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4313      	orrs	r3, r2
 800181e:	610b      	str	r3, [r1, #16]
}
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40013c00 	.word	0x40013c00

08001830 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <EXTI_GetFlagStatus+0x30>)
 800183e:	695a      	ldr	r2, [r3, #20]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e001      	b.n	8001852 <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	40013c00 	.word	0x40013c00

08001864 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800186c:	4a03      	ldr	r2, [pc, #12]	; (800187c <EXTI_ClearFlag+0x18>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6153      	str	r3, [r2, #20]
}
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	40013c00 	.word	0x40013c00

08001880 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <EXTI_GetITStatus+0x44>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4013      	ands	r3, r2
 8001898:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <EXTI_GetITStatus+0x44>)
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d005      	beq.n	80018b2 <EXTI_GetITStatus+0x32>
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	e001      	b.n	80018b6 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40013c00 	.word	0x40013c00

080018c8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80018d0:	4a03      	ldr	r2, [pc, #12]	; (80018e0 <EXTI_ClearITPendingBit+0x18>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6153      	str	r3, [r2, #20]
}
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40013c00 	.word	0x40013c00

080018e4 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80018e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018ec:	2101      	movs	r1, #1
 80018ee:	f7ff fd9d 	bl	800142c <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 80018f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018f6:	2100      	movs	r1, #0
 80018f8:	f7ff fd98 	bl	800142c <RCC_APB2PeriphResetCmd>
}
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop

08001900 <SYSCFG_MemoryRemapConfig>:
  *         registers. 
  *        
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800190a:	4a04      	ldr	r2, [pc, #16]	; (800191c <SYSCFG_MemoryRemapConfig+0x1c>)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40013800 	.word	0x40013800

08001920 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001920:	b490      	push	{r4, r7}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	460a      	mov	r2, r1
 800192a:	71fb      	strb	r3, [r7, #7]
 800192c:	4613      	mov	r3, r2
 800192e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001934:	79bb      	ldrb	r3, [r7, #6]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001944:	4916      	ldr	r1, [pc, #88]	; (80019a0 <SYSCFG_EXTILineConfig+0x80>)
 8001946:	79bb      	ldrb	r3, [r7, #6]
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	b2db      	uxtb	r3, r3
 800194c:	4618      	mov	r0, r3
 800194e:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <SYSCFG_EXTILineConfig+0x80>)
 8001950:	79bb      	ldrb	r3, [r7, #6]
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	b2db      	uxtb	r3, r3
 8001956:	3302      	adds	r3, #2
 8001958:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	43db      	mvns	r3, r3
 8001960:	401a      	ands	r2, r3
 8001962:	1c83      	adds	r3, r0, #2
 8001964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8001968:	480d      	ldr	r0, [pc, #52]	; (80019a0 <SYSCFG_EXTILineConfig+0x80>)
 800196a:	79bb      	ldrb	r3, [r7, #6]
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	b2db      	uxtb	r3, r3
 8001970:	461c      	mov	r4, r3
 8001972:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <SYSCFG_EXTILineConfig+0x80>)
 8001974:	79bb      	ldrb	r3, [r7, #6]
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	b2db      	uxtb	r3, r3
 800197a:	3302      	adds	r3, #2
 800197c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001980:	79f9      	ldrb	r1, [r7, #7]
 8001982:	79bb      	ldrb	r3, [r7, #6]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	431a      	orrs	r2, r3
 8001990:	1ca3      	adds	r3, r4, #2
 8001992:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bc90      	pop	{r4, r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40013800 	.word	0x40013800

080019a4 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 80019ac:	4a03      	ldr	r2, [pc, #12]	; (80019bc <SYSCFG_ETH_MediaInterfaceConfig+0x18>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6013      	str	r3, [r2, #0]
}
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	422700dc 	.word	0x422700dc

080019c0 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 80019ca:	4a04      	ldr	r2, [pc, #16]	; (80019dc <SYSCFG_CompensationCellCmd+0x1c>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	42270400 	.word	0x42270400

080019e0 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <SYSCFG_GetCompensationCellStatus+0x30>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <SYSCFG_GetCompensationCellStatus+0x1c>
  {
    bitstatus = SET;
 80019f6:	2301      	movs	r3, #1
 80019f8:	71fb      	strb	r3, [r7, #7]
 80019fa:	e001      	b.n	8001a00 <SYSCFG_GetCompensationCellStatus+0x20>
  }
  else
  {
    bitstatus = RESET;
 80019fc:	2300      	movs	r3, #0
 80019fe:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 8001a00:	79fb      	ldrb	r3, [r7, #7]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40013800 	.word	0x40013800

08001a14 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a3c      	ldr	r2, [pc, #240]	; (8001b10 <GPIO_DeInit+0xfc>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d108      	bne.n	8001a36 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001a24:	2001      	movs	r0, #1
 8001a26:	2101      	movs	r1, #1
 8001a28:	f7ff fc88 	bl	800133c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	2100      	movs	r1, #0
 8001a30:	f7ff fc84 	bl	800133c <RCC_AHB1PeriphResetCmd>
 8001a34:	e068      	b.n	8001b08 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOB)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a36      	ldr	r2, [pc, #216]	; (8001b14 <GPIO_DeInit+0x100>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d108      	bne.n	8001a50 <GPIO_DeInit+0x3c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001a3e:	2002      	movs	r0, #2
 8001a40:	2101      	movs	r1, #1
 8001a42:	f7ff fc7b 	bl	800133c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8001a46:	2002      	movs	r0, #2
 8001a48:	2100      	movs	r1, #0
 8001a4a:	f7ff fc77 	bl	800133c <RCC_AHB1PeriphResetCmd>
 8001a4e:	e05b      	b.n	8001b08 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOC)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a31      	ldr	r2, [pc, #196]	; (8001b18 <GPIO_DeInit+0x104>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d108      	bne.n	8001a6a <GPIO_DeInit+0x56>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001a58:	2004      	movs	r0, #4
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	f7ff fc6e 	bl	800133c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8001a60:	2004      	movs	r0, #4
 8001a62:	2100      	movs	r1, #0
 8001a64:	f7ff fc6a 	bl	800133c <RCC_AHB1PeriphResetCmd>
 8001a68:	e04e      	b.n	8001b08 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOD)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a2b      	ldr	r2, [pc, #172]	; (8001b1c <GPIO_DeInit+0x108>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d108      	bne.n	8001a84 <GPIO_DeInit+0x70>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001a72:	2008      	movs	r0, #8
 8001a74:	2101      	movs	r1, #1
 8001a76:	f7ff fc61 	bl	800133c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8001a7a:	2008      	movs	r0, #8
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	f7ff fc5d 	bl	800133c <RCC_AHB1PeriphResetCmd>
 8001a82:	e041      	b.n	8001b08 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a26      	ldr	r2, [pc, #152]	; (8001b20 <GPIO_DeInit+0x10c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d108      	bne.n	8001a9e <GPIO_DeInit+0x8a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8001a8c:	2010      	movs	r0, #16
 8001a8e:	2101      	movs	r1, #1
 8001a90:	f7ff fc54 	bl	800133c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8001a94:	2010      	movs	r0, #16
 8001a96:	2100      	movs	r1, #0
 8001a98:	f7ff fc50 	bl	800133c <RCC_AHB1PeriphResetCmd>
 8001a9c:	e034      	b.n	8001b08 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a20      	ldr	r2, [pc, #128]	; (8001b24 <GPIO_DeInit+0x110>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d108      	bne.n	8001ab8 <GPIO_DeInit+0xa4>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8001aa6:	2020      	movs	r0, #32
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	f7ff fc47 	bl	800133c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8001aae:	2020      	movs	r0, #32
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	f7ff fc43 	bl	800133c <RCC_AHB1PeriphResetCmd>
 8001ab6:	e027      	b.n	8001b08 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOG)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a1b      	ldr	r2, [pc, #108]	; (8001b28 <GPIO_DeInit+0x114>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d108      	bne.n	8001ad2 <GPIO_DeInit+0xbe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8001ac0:	2040      	movs	r0, #64	; 0x40
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	f7ff fc3a 	bl	800133c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8001ac8:	2040      	movs	r0, #64	; 0x40
 8001aca:	2100      	movs	r1, #0
 8001acc:	f7ff fc36 	bl	800133c <RCC_AHB1PeriphResetCmd>
 8001ad0:	e01a      	b.n	8001b08 <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOH)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a15      	ldr	r2, [pc, #84]	; (8001b2c <GPIO_DeInit+0x118>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d108      	bne.n	8001aec <GPIO_DeInit+0xd8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8001ada:	2080      	movs	r0, #128	; 0x80
 8001adc:	2101      	movs	r1, #1
 8001ade:	f7ff fc2d 	bl	800133c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8001ae2:	2080      	movs	r0, #128	; 0x80
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	f7ff fc29 	bl	800133c <RCC_AHB1PeriphResetCmd>
 8001aea:	e00d      	b.n	8001b08 <GPIO_DeInit+0xf4>
  }
  else
  {
    if (GPIOx == GPIOI)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a10      	ldr	r2, [pc, #64]	; (8001b30 <GPIO_DeInit+0x11c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d109      	bne.n	8001b08 <GPIO_DeInit+0xf4>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8001af4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001af8:	2101      	movs	r1, #1
 8001afa:	f7ff fc1f 	bl	800133c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8001afe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b02:	2100      	movs	r1, #0
 8001b04:	f7ff fc1a 	bl	800133c <RCC_AHB1PeriphResetCmd>
    }
  }
}
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020400 	.word	0x40020400
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020c00 	.word	0x40020c00
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40021400 	.word	0x40021400
 8001b28:	40021800 	.word	0x40021800
 8001b2c:	40021c00 	.word	0x40021c00
 8001b30:	40022000 	.word	0x40022000

08001b34 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	e076      	b.n	8001c3e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2201      	movs	r2, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d165      	bne.n	8001c38 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4619      	mov	r1, r3
 8001b76:	2303      	movs	r3, #3
 8001b78:	408b      	lsls	r3, r1
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	401a      	ands	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	791b      	ldrb	r3, [r3, #4]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	791b      	ldrb	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d003      	beq.n	8001baa <GPIO_Init+0x76>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	791b      	ldrb	r3, [r3, #4]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d12e      	bne.n	8001c08 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	408b      	lsls	r3, r1
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	401a      	ands	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	795b      	ldrb	r3, [r3, #5]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	4619      	mov	r1, r3
 8001be2:	2301      	movs	r3, #1
 8001be4:	408b      	lsls	r3, r1
 8001be6:	43db      	mvns	r3, r3
 8001be8:	401a      	ands	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	7992      	ldrb	r2, [r2, #6]
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	b292      	uxth	r2, r2
 8001bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001c00:	b292      	uxth	r2, r2
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2103      	movs	r1, #3
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	79db      	ldrb	r3, [r3, #7]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2b0f      	cmp	r3, #15
 8001c42:	d985      	bls.n	8001b50 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop

08001c50 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	71da      	strb	r2, [r3, #7]
}
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop

08001c84 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8001c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8001ca4:	887a      	ldrh	r2, [r7, #2]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	60fb      	str	r3, [r7, #12]
}
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop

08001cc8 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	887b      	ldrh	r3, [r7, #2]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	e001      	b.n	8001cee <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	b29b      	uxth	r3, r3
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop

08001d18 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	887b      	ldrh	r3, [r7, #2]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001d34:	2301      	movs	r3, #1
 8001d36:	73fb      	strb	r3, [r7, #15]
 8001d38:	e001      	b.n	8001d3e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	b29b      	uxth	r3, r3
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop

08001d68 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	887a      	ldrh	r2, [r7, #2]
 8001d78:	831a      	strh	r2, [r3, #24]
}
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	887a      	ldrh	r2, [r7, #2]
 8001d94:	835a      	strh	r2, [r3, #26]
}
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	807b      	strh	r3, [r7, #2]
 8001dac:	4613      	mov	r3, r2
 8001dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001db0:	787b      	ldrb	r3, [r7, #1]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	887a      	ldrh	r2, [r7, #2]
 8001dba:	831a      	strh	r2, [r3, #24]
 8001dbc:	e002      	b.n	8001dc4 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	887a      	ldrh	r2, [r7, #2]
 8001dc2:	835a      	strh	r2, [r3, #26]
  }
}
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop

08001dd0 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8001ddc:	887a      	ldrh	r2, [r7, #2]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	615a      	str	r2, [r3, #20]
}
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	887b      	ldrh	r3, [r7, #2]
 8001dfe:	405a      	eors	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	615a      	str	r2, [r3, #20]
}
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop

08001e10 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	f002 0207 	and.w	r2, r2, #7
 8001e30:	0092      	lsls	r2, r2, #2
 8001e32:	4093      	lsls	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	08db      	lsrs	r3, r3, #3
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	887b      	ldrh	r3, [r7, #2]
 8001e40:	08db      	lsrs	r3, r3, #3
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3208      	adds	r2, #8
 8001e4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e4e:	887b      	ldrh	r3, [r7, #2]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4619      	mov	r1, r3
 8001e58:	230f      	movs	r3, #15
 8001e5a:	408b      	lsls	r3, r1
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	ea02 0103 	and.w	r1, r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f100 0208 	add.w	r2, r0, #8
 8001e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	08db      	lsrs	r3, r3, #3
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3208      	adds	r2, #8
 8001e78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001e82:	887b      	ldrh	r3, [r7, #2]
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3208      	adds	r2, #8
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop

08001ea0 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a5f      	ldr	r2, [pc, #380]	; (8002028 <TIM_DeInit+0x188>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d108      	bne.n	8001ec2 <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	f7ff faba 	bl	800142c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001eb8:	2001      	movs	r0, #1
 8001eba:	2100      	movs	r1, #0
 8001ebc:	f7ff fab6 	bl	800142c <RCC_APB2PeriphResetCmd>
 8001ec0:	e0af      	b.n	8002022 <TIM_DeInit+0x182>
  } 
  else if (TIMx == TIM2) 
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec8:	d108      	bne.n	8001edc <TIM_DeInit+0x3c>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	2101      	movs	r1, #1
 8001ece:	f7ff fa8f 	bl	80013f0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	f7ff fa8b 	bl	80013f0 <RCC_APB1PeriphResetCmd>
 8001eda:	e0a2      	b.n	8002022 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM3)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a53      	ldr	r2, [pc, #332]	; (800202c <TIM_DeInit+0x18c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d108      	bne.n	8001ef6 <TIM_DeInit+0x56>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001ee4:	2002      	movs	r0, #2
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	f7ff fa82 	bl	80013f0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001eec:	2002      	movs	r0, #2
 8001eee:	2100      	movs	r1, #0
 8001ef0:	f7ff fa7e 	bl	80013f0 <RCC_APB1PeriphResetCmd>
 8001ef4:	e095      	b.n	8002022 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM4)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4d      	ldr	r2, [pc, #308]	; (8002030 <TIM_DeInit+0x190>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d108      	bne.n	8001f10 <TIM_DeInit+0x70>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001efe:	2004      	movs	r0, #4
 8001f00:	2101      	movs	r1, #1
 8001f02:	f7ff fa75 	bl	80013f0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001f06:	2004      	movs	r0, #4
 8001f08:	2100      	movs	r1, #0
 8001f0a:	f7ff fa71 	bl	80013f0 <RCC_APB1PeriphResetCmd>
 8001f0e:	e088      	b.n	8002022 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM5)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a48      	ldr	r2, [pc, #288]	; (8002034 <TIM_DeInit+0x194>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d108      	bne.n	8001f2a <TIM_DeInit+0x8a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8001f18:	2008      	movs	r0, #8
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	f7ff fa68 	bl	80013f0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8001f20:	2008      	movs	r0, #8
 8001f22:	2100      	movs	r1, #0
 8001f24:	f7ff fa64 	bl	80013f0 <RCC_APB1PeriphResetCmd>
 8001f28:	e07b      	b.n	8002022 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM6)  
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a42      	ldr	r2, [pc, #264]	; (8002038 <TIM_DeInit+0x198>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d108      	bne.n	8001f44 <TIM_DeInit+0xa4>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001f32:	2010      	movs	r0, #16
 8001f34:	2101      	movs	r1, #1
 8001f36:	f7ff fa5b 	bl	80013f0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001f3a:	2010      	movs	r0, #16
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	f7ff fa57 	bl	80013f0 <RCC_APB1PeriphResetCmd>
 8001f42:	e06e      	b.n	8002022 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM7)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a3d      	ldr	r2, [pc, #244]	; (800203c <TIM_DeInit+0x19c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d108      	bne.n	8001f5e <TIM_DeInit+0xbe>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8001f4c:	2020      	movs	r0, #32
 8001f4e:	2101      	movs	r1, #1
 8001f50:	f7ff fa4e 	bl	80013f0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8001f54:	2020      	movs	r0, #32
 8001f56:	2100      	movs	r1, #0
 8001f58:	f7ff fa4a 	bl	80013f0 <RCC_APB1PeriphResetCmd>
 8001f5c:	e061      	b.n	8002022 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM8)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a37      	ldr	r2, [pc, #220]	; (8002040 <TIM_DeInit+0x1a0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d108      	bne.n	8001f78 <TIM_DeInit+0xd8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8001f66:	2002      	movs	r0, #2
 8001f68:	2101      	movs	r1, #1
 8001f6a:	f7ff fa5f 	bl	800142c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8001f6e:	2002      	movs	r0, #2
 8001f70:	2100      	movs	r1, #0
 8001f72:	f7ff fa5b 	bl	800142c <RCC_APB2PeriphResetCmd>
 8001f76:	e054      	b.n	8002022 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM9)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a32      	ldr	r2, [pc, #200]	; (8002044 <TIM_DeInit+0x1a4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d10a      	bne.n	8001f96 <TIM_DeInit+0xf6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8001f80:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001f84:	2101      	movs	r1, #1
 8001f86:	f7ff fa51 	bl	800142c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8001f8a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001f8e:	2100      	movs	r1, #0
 8001f90:	f7ff fa4c 	bl	800142c <RCC_APB2PeriphResetCmd>
 8001f94:	e045      	b.n	8002022 <TIM_DeInit+0x182>
   }  
  else if (TIMx == TIM10)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a2b      	ldr	r2, [pc, #172]	; (8002048 <TIM_DeInit+0x1a8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d10a      	bne.n	8001fb4 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8001f9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	f7ff fa42 	bl	800142c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8001fa8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001fac:	2100      	movs	r1, #0
 8001fae:	f7ff fa3d 	bl	800142c <RCC_APB2PeriphResetCmd>
 8001fb2:	e036      	b.n	8002022 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM11) 
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a25      	ldr	r2, [pc, #148]	; (800204c <TIM_DeInit+0x1ac>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d10a      	bne.n	8001fd2 <TIM_DeInit+0x132>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001fbc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	f7ff fa33 	bl	800142c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8001fc6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001fca:	2100      	movs	r1, #0
 8001fcc:	f7ff fa2e 	bl	800142c <RCC_APB2PeriphResetCmd>
 8001fd0:	e027      	b.n	8002022 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM12)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <TIM_DeInit+0x1b0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d108      	bne.n	8001fec <TIM_DeInit+0x14c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8001fda:	2040      	movs	r0, #64	; 0x40
 8001fdc:	2101      	movs	r1, #1
 8001fde:	f7ff fa07 	bl	80013f0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001fe2:	2040      	movs	r0, #64	; 0x40
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	f7ff fa03 	bl	80013f0 <RCC_APB1PeriphResetCmd>
 8001fea:	e01a      	b.n	8002022 <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM13) 
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a19      	ldr	r2, [pc, #100]	; (8002054 <TIM_DeInit+0x1b4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d108      	bne.n	8002006 <TIM_DeInit+0x166>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8001ff4:	2080      	movs	r0, #128	; 0x80
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	f7ff f9fa 	bl	80013f0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8001ffc:	2080      	movs	r0, #128	; 0x80
 8001ffe:	2100      	movs	r1, #0
 8002000:	f7ff f9f6 	bl	80013f0 <RCC_APB1PeriphResetCmd>
 8002004:	e00d      	b.n	8002022 <TIM_DeInit+0x182>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a13      	ldr	r2, [pc, #76]	; (8002058 <TIM_DeInit+0x1b8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d109      	bne.n	8002022 <TIM_DeInit+0x182>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800200e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002012:	2101      	movs	r1, #1
 8002014:	f7ff f9ec 	bl	80013f0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8002018:	f44f 7080 	mov.w	r0, #256	; 0x100
 800201c:	2100      	movs	r1, #0
 800201e:	f7ff f9e7 	bl	80013f0 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40010000 	.word	0x40010000
 800202c:	40000400 	.word	0x40000400
 8002030:	40000800 	.word	0x40000800
 8002034:	40000c00 	.word	0x40000c00
 8002038:	40001000 	.word	0x40001000
 800203c:	40001400 	.word	0x40001400
 8002040:	40010400 	.word	0x40010400
 8002044:	40014000 	.word	0x40014000
 8002048:	40014400 	.word	0x40014400
 800204c:	40014800 	.word	0x40014800
 8002050:	40001800 	.word	0x40001800
 8002054:	40001c00 	.word	0x40001c00
 8002058:	40002000 	.word	0x40002000

0800205c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a28      	ldr	r2, [pc, #160]	; (8002114 <TIM_TimeBaseInit+0xb8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d013      	beq.n	80020a0 <TIM_TimeBaseInit+0x44>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a27      	ldr	r2, [pc, #156]	; (8002118 <TIM_TimeBaseInit+0xbc>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d00f      	beq.n	80020a0 <TIM_TimeBaseInit+0x44>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002086:	d00b      	beq.n	80020a0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a24      	ldr	r2, [pc, #144]	; (800211c <TIM_TimeBaseInit+0xc0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d007      	beq.n	80020a0 <TIM_TimeBaseInit+0x44>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a23      	ldr	r2, [pc, #140]	; (8002120 <TIM_TimeBaseInit+0xc4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d003      	beq.n	80020a0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a22      	ldr	r2, [pc, #136]	; (8002124 <TIM_TimeBaseInit+0xc8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d108      	bne.n	80020b2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80020a0:	89fb      	ldrh	r3, [r7, #14]
 80020a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	885a      	ldrh	r2, [r3, #2]
 80020ac:	89fb      	ldrh	r3, [r7, #14]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <TIM_TimeBaseInit+0xcc>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00c      	beq.n	80020d4 <TIM_TimeBaseInit+0x78>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a1b      	ldr	r2, [pc, #108]	; (800212c <TIM_TimeBaseInit+0xd0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d008      	beq.n	80020d4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80020c2:	89fb      	ldrh	r3, [r7, #14]
 80020c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	891a      	ldrh	r2, [r3, #8]
 80020ce:	89fb      	ldrh	r3, [r7, #14]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	89fa      	ldrh	r2, [r7, #14]
 80020d8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	881a      	ldrh	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a09      	ldr	r2, [pc, #36]	; (8002114 <TIM_TimeBaseInit+0xb8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d003      	beq.n	80020fa <TIM_TimeBaseInit+0x9e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a08      	ldr	r2, [pc, #32]	; (8002118 <TIM_TimeBaseInit+0xbc>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d104      	bne.n	8002104 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	7a9b      	ldrb	r3, [r3, #10]
 80020fe:	b29a      	uxth	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	829a      	strh	r2, [r3, #20]
}
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	40010000 	.word	0x40010000
 8002118:	40010400 	.word	0x40010400
 800211c:	40000400 	.word	0x40000400
 8002120:	40000800 	.word	0x40000800
 8002124:	40000c00 	.word	0x40000c00
 8002128:	40001000 	.word	0x40001000
 800212c:	40001400 	.word	0x40001400

08002130 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800213e:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	729a      	strb	r2, [r3, #10]
}
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop

08002164 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
 8002170:	4613      	mov	r3, r2
 8002172:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	883a      	ldrh	r2, [r7, #0]
 800217e:	829a      	strh	r2, [r3, #20]
}
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop

0800218c <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a2:	89fb      	ldrh	r3, [r7, #14]
 80021a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a8:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80021aa:	89fa      	ldrh	r2, [r7, #14]
 80021ac:	887b      	ldrh	r3, [r7, #2]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	89fa      	ldrh	r2, [r7, #14]
 80021b6:	801a      	strh	r2, [r3, #0]
}
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop

080021c4 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop

080021e0 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop

080021fc <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002220:	b29b      	uxth	r3, r3
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop

08002230 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d008      	beq.n	8002254 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	b29a      	uxth	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	801a      	strh	r2, [r3, #0]
 8002252:	e007      	b.n	8002264 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	f023 0302 	bic.w	r3, r3, #2
 800225e:	b29a      	uxth	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	801a      	strh	r2, [r3, #0]
  }
}
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop

08002270 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 800227c:	887b      	ldrh	r3, [r7, #2]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d008      	beq.n	8002294 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	f043 0304 	orr.w	r3, r3, #4
 800228c:	b29a      	uxth	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	801a      	strh	r2, [r3, #0]
 8002292:	e007      	b.n	80022a4 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	f023 0304 	bic.w	r3, r3, #4
 800229e:	b29a      	uxth	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	801a      	strh	r2, [r3, #0]
  }
}
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop

080022b0 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d008      	beq.n	80022d4 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	801a      	strh	r2, [r3, #0]
 80022d2:	e007      	b.n	80022e4 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022de:	b29a      	uxth	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	801a      	strh	r2, [r3, #0]
  }
}
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop

080022f0 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b29b      	uxth	r3, r3
 8002302:	f023 0308 	bic.w	r3, r3, #8
 8002306:	b29a      	uxth	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	b29a      	uxth	r2, r3
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	4313      	orrs	r3, r2
 8002316:	b29a      	uxth	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	801a      	strh	r2, [r3, #0]
}
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop

08002328 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800233e:	b29a      	uxth	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	b29a      	uxth	r2, r3
 800234a:	887b      	ldrh	r3, [r7, #2]
 800234c:	4313      	orrs	r3, r2
 800234e:	b29a      	uxth	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	801a      	strh	r2, [r3, #0]
}
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop

08002360 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	801a      	strh	r2, [r3, #0]
 8002382:	e007      	b.n	8002394 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	b29b      	uxth	r3, r3
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	801a      	strh	r2, [r3, #0]
  }
}
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop

080023a0 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	817b      	strh	r3, [r7, #10]
 80023ae:	2300      	movs	r3, #0
 80023b0:	81fb      	strh	r3, [r7, #14]
 80023b2:	2300      	movs	r3, #0
 80023b4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	8c1b      	ldrh	r3, [r3, #32]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	8c1b      	ldrh	r3, [r3, #32]
 80023ca:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	889b      	ldrh	r3, [r3, #4]
 80023d0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	8b1b      	ldrh	r3, [r3, #24]
 80023d6:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 80023d8:	897b      	ldrh	r3, [r7, #10]
 80023da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023de:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80023e0:	897b      	ldrh	r3, [r7, #10]
 80023e2:	f023 0303 	bic.w	r3, r3, #3
 80023e6:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	881a      	ldrh	r2, [r3, #0]
 80023ec:	897b      	ldrh	r3, [r7, #10]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80023f2:	89fb      	ldrh	r3, [r7, #14]
 80023f4:	f023 0302 	bic.w	r3, r3, #2
 80023f8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	899a      	ldrh	r2, [r3, #12]
 80023fe:	89fb      	ldrh	r3, [r7, #14]
 8002400:	4313      	orrs	r3, r2
 8002402:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	885a      	ldrh	r2, [r3, #2]
 8002408:	89fb      	ldrh	r3, [r7, #14]
 800240a:	4313      	orrs	r3, r2
 800240c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a1e      	ldr	r2, [pc, #120]	; (800248c <TIM_OC1Init+0xec>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d003      	beq.n	800241e <TIM_OC1Init+0x7e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <TIM_OC1Init+0xf0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d123      	bne.n	8002466 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800241e:	89fb      	ldrh	r3, [r7, #14]
 8002420:	f023 0308 	bic.w	r3, r3, #8
 8002424:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	89da      	ldrh	r2, [r3, #14]
 800242a:	89fb      	ldrh	r3, [r7, #14]
 800242c:	4313      	orrs	r3, r2
 800242e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8002430:	89fb      	ldrh	r3, [r7, #14]
 8002432:	f023 0304 	bic.w	r3, r3, #4
 8002436:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	889a      	ldrh	r2, [r3, #4]
 800243c:	89fb      	ldrh	r3, [r7, #14]
 800243e:	4313      	orrs	r3, r2
 8002440:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 8002442:	89bb      	ldrh	r3, [r7, #12]
 8002444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002448:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800244a:	89bb      	ldrh	r3, [r7, #12]
 800244c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002450:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	8a1a      	ldrh	r2, [r3, #16]
 8002456:	89bb      	ldrh	r3, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	8a5a      	ldrh	r2, [r3, #18]
 8002460:	89bb      	ldrh	r3, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	89ba      	ldrh	r2, [r7, #12]
 800246a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	897a      	ldrh	r2, [r7, #10]
 8002470:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	89fa      	ldrh	r2, [r7, #14]
 800247e:	841a      	strh	r2, [r3, #32]
}
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40010000 	.word	0x40010000
 8002490:	40010400 	.word	0x40010400

08002494 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	817b      	strh	r3, [r7, #10]
 80024a2:	2300      	movs	r3, #0
 80024a4:	81fb      	strh	r3, [r7, #14]
 80024a6:	2300      	movs	r3, #0
 80024a8:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	8c1b      	ldrh	r3, [r3, #32]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f023 0310 	bic.w	r3, r3, #16
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	8c1b      	ldrh	r3, [r3, #32]
 80024be:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	889b      	ldrh	r3, [r3, #4]
 80024c4:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	8b1b      	ldrh	r3, [r3, #24]
 80024ca:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 80024cc:	897b      	ldrh	r3, [r7, #10]
 80024ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024d2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80024d4:	897b      	ldrh	r3, [r7, #10]
 80024d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024da:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	897b      	ldrh	r3, [r7, #10]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 80024ea:	89fb      	ldrh	r3, [r7, #14]
 80024ec:	f023 0320 	bic.w	r3, r3, #32
 80024f0:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	899b      	ldrh	r3, [r3, #12]
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	89fb      	ldrh	r3, [r7, #14]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	885b      	ldrh	r3, [r3, #2]
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	b29a      	uxth	r2, r3
 8002508:	89fb      	ldrh	r3, [r7, #14]
 800250a:	4313      	orrs	r3, r2
 800250c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a22      	ldr	r2, [pc, #136]	; (800259c <TIM_OC2Init+0x108>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d003      	beq.n	800251e <TIM_OC2Init+0x8a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a21      	ldr	r2, [pc, #132]	; (80025a0 <TIM_OC2Init+0x10c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d12b      	bne.n	8002576 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800251e:	89fb      	ldrh	r3, [r7, #14]
 8002520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002524:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	89db      	ldrh	r3, [r3, #14]
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	b29a      	uxth	r2, r3
 800252e:	89fb      	ldrh	r3, [r7, #14]
 8002530:	4313      	orrs	r3, r2
 8002532:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8002534:	89fb      	ldrh	r3, [r7, #14]
 8002536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800253a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	889b      	ldrh	r3, [r3, #4]
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	b29a      	uxth	r2, r3
 8002544:	89fb      	ldrh	r3, [r7, #14]
 8002546:	4313      	orrs	r3, r2
 8002548:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 800254a:	89bb      	ldrh	r3, [r7, #12]
 800254c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002550:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8002552:	89bb      	ldrh	r3, [r7, #12]
 8002554:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002558:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	8a1b      	ldrh	r3, [r3, #16]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	b29a      	uxth	r2, r3
 8002562:	89bb      	ldrh	r3, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	8a5b      	ldrh	r3, [r3, #18]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	b29a      	uxth	r2, r3
 8002570:	89bb      	ldrh	r3, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	89ba      	ldrh	r2, [r7, #12]
 800257a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	897a      	ldrh	r2, [r7, #10]
 8002580:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	89fa      	ldrh	r2, [r7, #14]
 800258e:	841a      	strh	r2, [r3, #32]
}
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40010000 	.word	0x40010000
 80025a0:	40010400 	.word	0x40010400

080025a4 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	817b      	strh	r3, [r7, #10]
 80025b2:	2300      	movs	r3, #0
 80025b4:	81fb      	strh	r3, [r7, #14]
 80025b6:	2300      	movs	r3, #0
 80025b8:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	8c1b      	ldrh	r3, [r3, #32]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	8c1b      	ldrh	r3, [r3, #32]
 80025ce:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	889b      	ldrh	r3, [r3, #4]
 80025d4:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	8b9b      	ldrh	r3, [r3, #28]
 80025da:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 80025dc:	897b      	ldrh	r3, [r7, #10]
 80025de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80025e4:	897b      	ldrh	r3, [r7, #10]
 80025e6:	f023 0303 	bic.w	r3, r3, #3
 80025ea:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	881a      	ldrh	r2, [r3, #0]
 80025f0:	897b      	ldrh	r3, [r7, #10]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80025f6:	89fb      	ldrh	r3, [r7, #14]
 80025f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025fc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	899b      	ldrh	r3, [r3, #12]
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	b29a      	uxth	r2, r3
 8002606:	89fb      	ldrh	r3, [r7, #14]
 8002608:	4313      	orrs	r3, r2
 800260a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	885b      	ldrh	r3, [r3, #2]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	b29a      	uxth	r2, r3
 8002614:	89fb      	ldrh	r3, [r7, #14]
 8002616:	4313      	orrs	r3, r2
 8002618:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a22      	ldr	r2, [pc, #136]	; (80026a8 <TIM_OC3Init+0x104>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d003      	beq.n	800262a <TIM_OC3Init+0x86>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a21      	ldr	r2, [pc, #132]	; (80026ac <TIM_OC3Init+0x108>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d12b      	bne.n	8002682 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800262a:	89fb      	ldrh	r3, [r7, #14]
 800262c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002630:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	89db      	ldrh	r3, [r3, #14]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	b29a      	uxth	r2, r3
 800263a:	89fb      	ldrh	r3, [r7, #14]
 800263c:	4313      	orrs	r3, r2
 800263e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8002640:	89fb      	ldrh	r3, [r7, #14]
 8002642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002646:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	889b      	ldrh	r3, [r3, #4]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	b29a      	uxth	r2, r3
 8002650:	89fb      	ldrh	r3, [r7, #14]
 8002652:	4313      	orrs	r3, r2
 8002654:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8002656:	89bb      	ldrh	r3, [r7, #12]
 8002658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800265c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800265e:	89bb      	ldrh	r3, [r7, #12]
 8002660:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002664:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	8a1b      	ldrh	r3, [r3, #16]
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	b29a      	uxth	r2, r3
 800266e:	89bb      	ldrh	r3, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	8a5b      	ldrh	r3, [r3, #18]
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	b29a      	uxth	r2, r3
 800267c:	89bb      	ldrh	r3, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	89ba      	ldrh	r2, [r7, #12]
 8002686:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	897a      	ldrh	r2, [r7, #10]
 800268c:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	89fa      	ldrh	r2, [r7, #14]
 800269a:	841a      	strh	r2, [r3, #32]
}
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40010000 	.word	0x40010000
 80026ac:	40010400 	.word	0x40010400

080026b0 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	81bb      	strh	r3, [r7, #12]
 80026be:	2300      	movs	r3, #0
 80026c0:	817b      	strh	r3, [r7, #10]
 80026c2:	2300      	movs	r3, #0
 80026c4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	8c1b      	ldrh	r3, [r3, #32]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	8c1b      	ldrh	r3, [r3, #32]
 80026da:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	889b      	ldrh	r3, [r3, #4]
 80026e0:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8b9b      	ldrh	r3, [r3, #28]
 80026e6:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 80026e8:	89bb      	ldrh	r3, [r7, #12]
 80026ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ee:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80026f0:	89bb      	ldrh	r3, [r7, #12]
 80026f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f6:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	b29a      	uxth	r2, r3
 8002700:	89bb      	ldrh	r3, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8002706:	897b      	ldrh	r3, [r7, #10]
 8002708:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800270c:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	899b      	ldrh	r3, [r3, #12]
 8002712:	031b      	lsls	r3, r3, #12
 8002714:	b29a      	uxth	r2, r3
 8002716:	897b      	ldrh	r3, [r7, #10]
 8002718:	4313      	orrs	r3, r2
 800271a:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	885b      	ldrh	r3, [r3, #2]
 8002720:	031b      	lsls	r3, r3, #12
 8002722:	b29a      	uxth	r2, r3
 8002724:	897b      	ldrh	r3, [r7, #10]
 8002726:	4313      	orrs	r3, r2
 8002728:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a11      	ldr	r2, [pc, #68]	; (8002774 <TIM_OC4Init+0xc4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d003      	beq.n	800273a <TIM_OC4Init+0x8a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a10      	ldr	r2, [pc, #64]	; (8002778 <TIM_OC4Init+0xc8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d10a      	bne.n	8002750 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800273a:	89fb      	ldrh	r3, [r7, #14]
 800273c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002740:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	8a1b      	ldrh	r3, [r3, #16]
 8002746:	019b      	lsls	r3, r3, #6
 8002748:	b29a      	uxth	r2, r3
 800274a:	89fb      	ldrh	r3, [r7, #14]
 800274c:	4313      	orrs	r3, r2
 800274e:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	89fa      	ldrh	r2, [r7, #14]
 8002754:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	89ba      	ldrh	r2, [r7, #12]
 800275a:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	897a      	ldrh	r2, [r7, #10]
 8002768:	841a      	strh	r2, [r3, #32]
}
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	40010000 	.word	0x40010000
 8002778:	40010400 	.word	0x40010400

0800277c <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	825a      	strh	r2, [r3, #18]
}
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop

080027c0 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
 80027cc:	4613      	mov	r3, r2
 80027ce:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3318      	adds	r3, #24
 80027e0:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 80027e2:	887b      	ldrh	r3, [r7, #2]
 80027e4:	2201      	movs	r2, #1
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	8c1b      	ldrh	r3, [r3, #32]
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	897b      	ldrh	r3, [r7, #10]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4013      	ands	r3, r2
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8002800:	887b      	ldrh	r3, [r7, #2]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <TIM_SelectOCxM+0x4c>
 8002806:	887b      	ldrh	r3, [r7, #2]
 8002808:	2b08      	cmp	r3, #8
 800280a:	d114      	bne.n	8002836 <TIM_SelectOCxM+0x76>
  {
    tmp += (TIM_Channel>>1);
 800280c:	887b      	ldrh	r3, [r7, #2]
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	b29b      	uxth	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6819      	ldr	r1, [r3, #0]
 8002820:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8002824:	400b      	ands	r3, r1
 8002826:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	6811      	ldr	r1, [r2, #0]
 800282e:	883a      	ldrh	r2, [r7, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	e017      	b.n	8002866 <TIM_SelectOCxM+0xa6>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8002836:	887b      	ldrh	r3, [r7, #2]
 8002838:	3b04      	subs	r3, #4
 800283a:	b29b      	uxth	r3, r3
 800283c:	085b      	lsrs	r3, r3, #1
 800283e:	b29b      	uxth	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4413      	add	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6819      	ldr	r1, [r3, #0]
 800284e:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8002852:	400b      	ands	r3, r1
 8002854:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	8839      	ldrh	r1, [r7, #0]
 800285e:	0209      	lsls	r1, r1, #8
 8002860:	b289      	uxth	r1, r1
 8002862:	430a      	orrs	r2, r1
 8002864:	601a      	str	r2, [r3, #0]
  }
}
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop

0800288c <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop

080028a8 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop

080028c4 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop

080028e0 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8b1b      	ldrh	r3, [r3, #24]
 80028f4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 80028f6:	89fb      	ldrh	r3, [r7, #14]
 80028f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fc:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 80028fe:	89fa      	ldrh	r2, [r7, #14]
 8002900:	887b      	ldrh	r3, [r7, #2]
 8002902:	4313      	orrs	r3, r2
 8002904:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	89fa      	ldrh	r2, [r7, #14]
 800290a:	831a      	strh	r2, [r3, #24]
}
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop

08002918 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8b1b      	ldrh	r3, [r3, #24]
 800292c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 800292e:	89fb      	ldrh	r3, [r7, #14]
 8002930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002934:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8002936:	887b      	ldrh	r3, [r7, #2]
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	b29a      	uxth	r2, r3
 800293c:	89fb      	ldrh	r3, [r7, #14]
 800293e:	4313      	orrs	r3, r2
 8002940:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	89fa      	ldrh	r2, [r7, #14]
 8002946:	831a      	strh	r2, [r3, #24]
}
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop

08002954 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	8b9b      	ldrh	r3, [r3, #28]
 8002968:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 800296a:	89fb      	ldrh	r3, [r7, #14]
 800296c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002970:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8002972:	89fa      	ldrh	r2, [r7, #14]
 8002974:	887b      	ldrh	r3, [r7, #2]
 8002976:	4313      	orrs	r3, r2
 8002978:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	89fa      	ldrh	r2, [r7, #14]
 800297e:	839a      	strh	r2, [r3, #28]
}
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop

0800298c <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	8b9b      	ldrh	r3, [r3, #28]
 80029a0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 80029a2:	89fb      	ldrh	r3, [r7, #14]
 80029a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a8:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 80029aa:	887b      	ldrh	r3, [r7, #2]
 80029ac:	021b      	lsls	r3, r3, #8
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	89fb      	ldrh	r3, [r7, #14]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	89fa      	ldrh	r2, [r7, #14]
 80029ba:	839a      	strh	r2, [r3, #28]
}
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop

080029c8 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	8b1b      	ldrh	r3, [r3, #24]
 80029dc:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 80029de:	89fb      	ldrh	r3, [r7, #14]
 80029e0:	f023 0308 	bic.w	r3, r3, #8
 80029e4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80029e6:	89fa      	ldrh	r2, [r7, #14]
 80029e8:	887b      	ldrh	r3, [r7, #2]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	89fa      	ldrh	r2, [r7, #14]
 80029f2:	831a      	strh	r2, [r3, #24]
}
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop

08002a00 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	8b1b      	ldrh	r3, [r3, #24]
 8002a14:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8002a16:	89fb      	ldrh	r3, [r7, #14]
 8002a18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a1c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8002a1e:	887b      	ldrh	r3, [r7, #2]
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	89fb      	ldrh	r3, [r7, #14]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	89fa      	ldrh	r2, [r7, #14]
 8002a2e:	831a      	strh	r2, [r3, #24]
}
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop

08002a3c <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8b9b      	ldrh	r3, [r3, #28]
 8002a50:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8002a52:	89fb      	ldrh	r3, [r7, #14]
 8002a54:	f023 0308 	bic.w	r3, r3, #8
 8002a58:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8002a5a:	89fa      	ldrh	r2, [r7, #14]
 8002a5c:	887b      	ldrh	r3, [r7, #2]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	89fa      	ldrh	r2, [r7, #14]
 8002a66:	839a      	strh	r2, [r3, #28]
}
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop

08002a74 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	8b9b      	ldrh	r3, [r3, #28]
 8002a88:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8002a8a:	89fb      	ldrh	r3, [r7, #14]
 8002a8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a90:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8002a92:	887b      	ldrh	r3, [r7, #2]
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	89fb      	ldrh	r3, [r7, #14]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	89fa      	ldrh	r2, [r7, #14]
 8002aa2:	839a      	strh	r2, [r3, #28]
}
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop

08002ab0 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	8b1b      	ldrh	r3, [r3, #24]
 8002ac4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8002ac6:	89fb      	ldrh	r3, [r7, #14]
 8002ac8:	f023 0304 	bic.w	r3, r3, #4
 8002acc:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8002ace:	89fa      	ldrh	r2, [r7, #14]
 8002ad0:	887b      	ldrh	r3, [r7, #2]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	89fa      	ldrh	r2, [r7, #14]
 8002ada:	831a      	strh	r2, [r3, #24]
}
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop

08002ae8 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8b1b      	ldrh	r3, [r3, #24]
 8002afc:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8002afe:	89fb      	ldrh	r3, [r7, #14]
 8002b00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b04:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8002b06:	887b      	ldrh	r3, [r7, #2]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	89fb      	ldrh	r3, [r7, #14]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	89fa      	ldrh	r2, [r7, #14]
 8002b16:	831a      	strh	r2, [r3, #24]
}
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop

08002b24 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8b9b      	ldrh	r3, [r3, #28]
 8002b38:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8002b3a:	89fb      	ldrh	r3, [r7, #14]
 8002b3c:	f023 0304 	bic.w	r3, r3, #4
 8002b40:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8002b42:	89fa      	ldrh	r2, [r7, #14]
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	89fa      	ldrh	r2, [r7, #14]
 8002b4e:	839a      	strh	r2, [r3, #28]
}
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop

08002b5c <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	8b9b      	ldrh	r3, [r3, #28]
 8002b70:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8002b72:	89fb      	ldrh	r3, [r7, #14]
 8002b74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b78:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8002b7a:	887b      	ldrh	r3, [r7, #2]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	89fb      	ldrh	r3, [r7, #14]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	89fa      	ldrh	r2, [r7, #14]
 8002b8a:	839a      	strh	r2, [r3, #28]
}
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop

08002b98 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8b1b      	ldrh	r3, [r3, #24]
 8002bac:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8002bae:	89fb      	ldrh	r3, [r7, #14]
 8002bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bb4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8002bb6:	89fa      	ldrh	r2, [r7, #14]
 8002bb8:	887b      	ldrh	r3, [r7, #2]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	89fa      	ldrh	r2, [r7, #14]
 8002bc2:	831a      	strh	r2, [r3, #24]
}
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop

08002bd0 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	8b1b      	ldrh	r3, [r3, #24]
 8002be4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8002be6:	89fb      	ldrh	r3, [r7, #14]
 8002be8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002bec:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8002bee:	887b      	ldrh	r3, [r7, #2]
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	89fb      	ldrh	r3, [r7, #14]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	89fa      	ldrh	r2, [r7, #14]
 8002bfe:	831a      	strh	r2, [r3, #24]
}
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop

08002c0c <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	8b9b      	ldrh	r3, [r3, #28]
 8002c20:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8002c22:	89fb      	ldrh	r3, [r7, #14]
 8002c24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c28:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8002c2a:	89fa      	ldrh	r2, [r7, #14]
 8002c2c:	887b      	ldrh	r3, [r7, #2]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	89fa      	ldrh	r2, [r7, #14]
 8002c36:	839a      	strh	r2, [r3, #28]
}
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop

08002c44 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	8b9b      	ldrh	r3, [r3, #28]
 8002c58:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8002c5a:	89fb      	ldrh	r3, [r7, #14]
 8002c5c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002c60:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8002c62:	887b      	ldrh	r3, [r7, #2]
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	89fb      	ldrh	r3, [r7, #14]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	89fa      	ldrh	r2, [r7, #14]
 8002c72:	839a      	strh	r2, [r3, #28]
}
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop

08002c80 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8c1b      	ldrh	r3, [r3, #32]
 8002c94:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8002c96:	89fb      	ldrh	r3, [r7, #14]
 8002c98:	f023 0302 	bic.w	r3, r3, #2
 8002c9c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 8002c9e:	89fa      	ldrh	r2, [r7, #14]
 8002ca0:	887b      	ldrh	r3, [r7, #2]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	89fa      	ldrh	r2, [r7, #14]
 8002caa:	841a      	strh	r2, [r3, #32]
}
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop

08002cb8 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8c1b      	ldrh	r3, [r3, #32]
 8002ccc:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002cce:	89fb      	ldrh	r3, [r7, #14]
 8002cd0:	f023 0308 	bic.w	r3, r3, #8
 8002cd4:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 8002cd6:	89fa      	ldrh	r2, [r7, #14]
 8002cd8:	887b      	ldrh	r3, [r7, #2]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	89fa      	ldrh	r2, [r7, #14]
 8002ce2:	841a      	strh	r2, [r3, #32]
}
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop

08002cf0 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	8c1b      	ldrh	r3, [r3, #32]
 8002d04:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8002d06:	89fb      	ldrh	r3, [r7, #14]
 8002d08:	f023 0320 	bic.w	r3, r3, #32
 8002d0c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8002d0e:	887b      	ldrh	r3, [r7, #2]
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	89fb      	ldrh	r3, [r7, #14]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	89fa      	ldrh	r2, [r7, #14]
 8002d1e:	841a      	strh	r2, [r3, #32]
}
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop

08002d2c <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8c1b      	ldrh	r3, [r3, #32]
 8002d40:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002d42:	89fb      	ldrh	r3, [r7, #14]
 8002d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d48:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8002d4a:	887b      	ldrh	r3, [r7, #2]
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	89fb      	ldrh	r3, [r7, #14]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	89fa      	ldrh	r2, [r7, #14]
 8002d5a:	841a      	strh	r2, [r3, #32]
}
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop

08002d68 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	8c1b      	ldrh	r3, [r3, #32]
 8002d7c:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002d7e:	89fb      	ldrh	r3, [r7, #14]
 8002d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d84:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8002d86:	887b      	ldrh	r3, [r7, #2]
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	89fb      	ldrh	r3, [r7, #14]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	89fa      	ldrh	r2, [r7, #14]
 8002d96:	841a      	strh	r2, [r3, #32]
}
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop

08002da4 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	8c1b      	ldrh	r3, [r3, #32]
 8002db8:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8002dba:	89fb      	ldrh	r3, [r7, #14]
 8002dbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dc0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8002dc2:	887b      	ldrh	r3, [r7, #2]
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	89fb      	ldrh	r3, [r7, #14]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	89fa      	ldrh	r2, [r7, #14]
 8002dd2:	841a      	strh	r2, [r3, #32]
}
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop

08002de0 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	8c1b      	ldrh	r3, [r3, #32]
 8002df4:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8002df6:	89fb      	ldrh	r3, [r7, #14]
 8002df8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dfc:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8002dfe:	887b      	ldrh	r3, [r7, #2]
 8002e00:	031b      	lsls	r3, r3, #12
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	89fb      	ldrh	r3, [r7, #14]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	89fa      	ldrh	r2, [r7, #14]
 8002e0e:	841a      	strh	r2, [r3, #32]
}
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop

08002e1c <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8002e30:	887b      	ldrh	r3, [r7, #2]
 8002e32:	2201      	movs	r2, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	8c1b      	ldrh	r3, [r3, #32]
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	89fb      	ldrh	r3, [r7, #14]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	4013      	ands	r3, r2
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	8c1b      	ldrh	r3, [r3, #32]
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	8839      	ldrh	r1, [r7, #0]
 8002e56:	887b      	ldrh	r3, [r7, #2]
 8002e58:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	841a      	strh	r2, [r3, #32]
}
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	807b      	strh	r3, [r7, #2]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8002e84:	887b      	ldrh	r3, [r7, #2]
 8002e86:	2204      	movs	r2, #4
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	8c1b      	ldrh	r3, [r3, #32]
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	89fb      	ldrh	r3, [r7, #14]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8c1b      	ldrh	r3, [r3, #32]
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	8839      	ldrh	r1, [r7, #0]
 8002eaa:	887b      	ldrh	r3, [r7, #2]
 8002eac:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	841a      	strh	r2, [r3, #32]
}
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10f      	bne.n	8002ef6 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	8859      	ldrh	r1, [r3, #2]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	889a      	ldrh	r2, [r3, #4]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	891b      	ldrh	r3, [r3, #8]
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fcb0 	bl	8003848 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	88db      	ldrh	r3, [r3, #6]
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	f000 f8e0 	bl	80030b4 <TIM_SetIC1Prescaler>
 8002ef4:	e036      	b.n	8002f64 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d10f      	bne.n	8002f1e <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	8859      	ldrh	r1, [r3, #2]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	889a      	ldrh	r2, [r3, #4]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	891b      	ldrh	r3, [r3, #8]
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fcde 	bl	80038cc <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	88db      	ldrh	r3, [r3, #6]
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4619      	mov	r1, r3
 8002f18:	f000 f8e8 	bl	80030ec <TIM_SetIC2Prescaler>
 8002f1c:	e022      	b.n	8002f64 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d10f      	bne.n	8002f46 <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	8859      	ldrh	r1, [r3, #2]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	889a      	ldrh	r2, [r3, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	891b      	ldrh	r3, [r3, #8]
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fd16 	bl	8003964 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	88db      	ldrh	r3, [r3, #6]
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f000 f8f2 	bl	8003128 <TIM_SetIC3Prescaler>
 8002f44:	e00e      	b.n	8002f64 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	8859      	ldrh	r1, [r3, #2]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	889a      	ldrh	r2, [r3, #4]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	891b      	ldrh	r3, [r3, #8]
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fd4e 	bl	80039f4 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	88db      	ldrh	r3, [r3, #6]
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	f000 f8fe 	bl	8003160 <TIM_SetIC4Prescaler>
  }
}
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop

08002f6c <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	811a      	strh	r2, [r3, #8]
}
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 8002faa:	2301      	movs	r3, #1
 8002fac:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	885b      	ldrh	r3, [r3, #2]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	81fb      	strh	r3, [r7, #14]
 8002fba:	e001      	b.n	8002fc0 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	889b      	ldrh	r3, [r3, #4]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d102      	bne.n	8002fce <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	81bb      	strh	r3, [r7, #12]
 8002fcc:	e001      	b.n	8002fd2 <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d11c      	bne.n	8003014 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	8859      	ldrh	r1, [r3, #2]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	889a      	ldrh	r2, [r3, #4]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	891b      	ldrh	r3, [r3, #8]
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fc2e 	bl	8003848 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	88db      	ldrh	r3, [r3, #6]
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	f000 f85e 	bl	80030b4 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	891b      	ldrh	r3, [r3, #8]
 8002ffc:	89f9      	ldrh	r1, [r7, #14]
 8002ffe:	89ba      	ldrh	r2, [r7, #12]
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fc63 	bl	80038cc <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	88db      	ldrh	r3, [r3, #6]
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	4619      	mov	r1, r3
 800300e:	f000 f86d 	bl	80030ec <TIM_SetIC2Prescaler>
 8003012:	e01b      	b.n	800304c <TIM_PWMIConfig+0xb0>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	8859      	ldrh	r1, [r3, #2]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	889a      	ldrh	r2, [r3, #4]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	891b      	ldrh	r3, [r3, #8]
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fc53 	bl	80038cc <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	88db      	ldrh	r3, [r3, #6]
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4619      	mov	r1, r3
 800302e:	f000 f85d 	bl	80030ec <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	891b      	ldrh	r3, [r3, #8]
 8003036:	89f9      	ldrh	r1, [r7, #14]
 8003038:	89ba      	ldrh	r2, [r7, #12]
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fc04 	bl	8003848 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	88db      	ldrh	r3, [r3, #6]
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4619      	mov	r1, r3
 8003048:	f000 f834 	bl	80030b4 <TIM_SetIC1Prescaler>
  }
}
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop

08003054 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	8b1b      	ldrh	r3, [r3, #24]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	f023 030c 	bic.w	r3, r3, #12
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	8b1b      	ldrh	r3, [r3, #24]
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	887b      	ldrh	r3, [r7, #2]
 80030d8:	4313      	orrs	r3, r2
 80030da:	b29a      	uxth	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	831a      	strh	r2, [r3, #24]
}
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop

080030ec <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8b1b      	ldrh	r3, [r3, #24]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003102:	b29a      	uxth	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	8b1b      	ldrh	r3, [r3, #24]
 800310c:	b29a      	uxth	r2, r3
 800310e:	887b      	ldrh	r3, [r7, #2]
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	b29b      	uxth	r3, r3
 8003114:	4313      	orrs	r3, r2
 8003116:	b29a      	uxth	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	831a      	strh	r2, [r3, #24]
}
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop

08003128 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	8b9b      	ldrh	r3, [r3, #28]
 8003138:	b29b      	uxth	r3, r3
 800313a:	f023 030c 	bic.w	r3, r3, #12
 800313e:	b29a      	uxth	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	8b9b      	ldrh	r3, [r3, #28]
 8003148:	b29a      	uxth	r2, r3
 800314a:	887b      	ldrh	r3, [r7, #2]
 800314c:	4313      	orrs	r3, r2
 800314e:	b29a      	uxth	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	839a      	strh	r2, [r3, #28]
}
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop

08003160 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8b9b      	ldrh	r3, [r3, #28]
 8003170:	b29b      	uxth	r3, r3
 8003172:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003176:	b29a      	uxth	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8b9b      	ldrh	r3, [r3, #28]
 8003180:	b29a      	uxth	r2, r3
 8003182:	887b      	ldrh	r3, [r7, #2]
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	b29b      	uxth	r3, r3
 8003188:	4313      	orrs	r3, r2
 800318a:	b29a      	uxth	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	839a      	strh	r2, [r3, #28]
}
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop

0800319c <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	881a      	ldrh	r2, [r3, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	885b      	ldrh	r3, [r3, #2]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80031b6:	4313      	orrs	r3, r2
 80031b8:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80031be:	4313      	orrs	r3, r2
 80031c0:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80031c6:	4313      	orrs	r3, r2
 80031c8:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80031ce:	4313      	orrs	r3, r2
 80031d0:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80031d6:	4313      	orrs	r3, r2
 80031d8:	b29a      	uxth	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop

080031ec <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	819a      	strh	r2, [r3, #12]
}
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00c      	beq.n	8003254 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003240:	b29b      	uxth	r3, r3
 8003242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800324a:	b29a      	uxth	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8003252:	e009      	b.n	8003268 <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800325a:	b29b      	uxth	r3, r3
 800325c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003260:	b29a      	uxth	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop

08003274 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	889b      	ldrh	r3, [r3, #4]
 800328a:	b29b      	uxth	r3, r3
 800328c:	f043 0304 	orr.w	r3, r3, #4
 8003290:	b29a      	uxth	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	809a      	strh	r2, [r3, #4]
 8003296:	e007      	b.n	80032a8 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	889b      	ldrh	r3, [r3, #4]
 800329c:	b29b      	uxth	r3, r3
 800329e:	f023 0304 	bic.w	r3, r3, #4
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	809a      	strh	r2, [r3, #4]
  }
}
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop

080032b4 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	889b      	ldrh	r3, [r3, #4]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	809a      	strh	r2, [r3, #4]
 80032d6:	e007      	b.n	80032e8 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	889b      	ldrh	r3, [r3, #4]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	f023 0301 	bic.w	r3, r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	809a      	strh	r2, [r3, #4]
  }
}
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop

080032f4 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
 8003300:	4613      	mov	r3, r2
 8003302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003304:	787b      	ldrb	r3, [r7, #1]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	899b      	ldrh	r3, [r3, #12]
 800330e:	b29a      	uxth	r2, r3
 8003310:	887b      	ldrh	r3, [r7, #2]
 8003312:	4313      	orrs	r3, r2
 8003314:	b29a      	uxth	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	819a      	strh	r2, [r3, #12]
 800331a:	e009      	b.n	8003330 <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	899b      	ldrh	r3, [r3, #12]
 8003320:	b29a      	uxth	r2, r3
 8003322:	887b      	ldrh	r3, [r7, #2]
 8003324:	43db      	mvns	r3, r3
 8003326:	b29b      	uxth	r3, r3
 8003328:	4013      	ands	r3, r2
 800332a:	b29a      	uxth	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	819a      	strh	r2, [r3, #12]
  }
}
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop

0800333c <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	887a      	ldrh	r2, [r7, #2]
 800334c:	829a      	strh	r2, [r3, #20]
}
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8003364:	2300      	movs	r3, #0
 8003366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	8a1b      	ldrh	r3, [r3, #16]
 800336c:	b29a      	uxth	r2, r3
 800336e:	887b      	ldrh	r3, [r7, #2]
 8003370:	4013      	ands	r3, r2
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
 800337c:	e001      	b.n	8003382 <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800337e:	2300      	movs	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 800339c:	887b      	ldrh	r3, [r7, #2]
 800339e:	43db      	mvns	r3, r3
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	821a      	strh	r2, [r3, #16]
}
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80033bc:	2300      	movs	r3, #0
 80033be:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	81bb      	strh	r3, [r7, #12]
 80033c4:	2300      	movs	r3, #0
 80033c6:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8a1b      	ldrh	r3, [r3, #16]
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	887b      	ldrh	r3, [r7, #2]
 80033d0:	4013      	ands	r3, r2
 80033d2:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	899b      	ldrh	r3, [r3, #12]
 80033d8:	b29a      	uxth	r2, r3
 80033da:	887b      	ldrh	r3, [r7, #2]
 80033dc:	4013      	ands	r3, r2
 80033de:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80033e0:	89bb      	ldrh	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <TIM_GetITStatus+0x42>
 80033e6:	897b      	ldrh	r3, [r7, #10]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	e001      	b.n	80033f6 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8003410:	887b      	ldrh	r3, [r7, #2]
 8003412:	43db      	mvns	r3, r3
 8003414:	b29a      	uxth	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	821a      	strh	r2, [r3, #16]
}
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	807b      	strh	r3, [r7, #2]
 8003430:	4613      	mov	r3, r2
 8003432:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8003434:	887a      	ldrh	r2, [r7, #2]
 8003436:	883b      	ldrh	r3, [r7, #0]
 8003438:	4313      	orrs	r3, r2
 800343a:	b29a      	uxth	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	807b      	strh	r3, [r7, #2]
 8003458:	4613      	mov	r3, r2
 800345a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800345c:	787b      	ldrb	r3, [r7, #1]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	899b      	ldrh	r3, [r3, #12]
 8003466:	b29a      	uxth	r2, r3
 8003468:	887b      	ldrh	r3, [r7, #2]
 800346a:	4313      	orrs	r3, r2
 800346c:	b29a      	uxth	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	819a      	strh	r2, [r3, #12]
 8003472:	e009      	b.n	8003488 <TIM_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	899b      	ldrh	r3, [r3, #12]
 8003478:	b29a      	uxth	r2, r3
 800347a:	887b      	ldrh	r3, [r7, #2]
 800347c:	43db      	mvns	r3, r3
 800347e:	b29b      	uxth	r3, r3
 8003480:	4013      	ands	r3, r2
 8003482:	b29a      	uxth	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	819a      	strh	r2, [r3, #12]
  }
}
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop

08003494 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d008      	beq.n	80034b8 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	889b      	ldrh	r3, [r3, #4]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	f043 0308 	orr.w	r3, r3, #8
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	809a      	strh	r2, [r3, #4]
 80034b6:	e007      	b.n	80034c8 <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	889b      	ldrh	r3, [r3, #4]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	f023 0308 	bic.w	r3, r3, #8
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	809a      	strh	r2, [r3, #4]
  }
}
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop

080034d4 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	891b      	ldrh	r3, [r3, #8]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	f023 0307 	bic.w	r3, r3, #7
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	811a      	strh	r2, [r3, #8]
}
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop

080034f8 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 8003504:	887b      	ldrh	r3, [r7, #2]
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	4619      	mov	r1, r3
 800350a:	f000 f887 	bl	800361c <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	891b      	ldrh	r3, [r3, #8]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f043 0307 	orr.w	r3, r3, #7
 8003518:	b29a      	uxth	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	811a      	strh	r2, [r3, #8]
}
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	4608      	mov	r0, r1
 800352e:	4611      	mov	r1, r2
 8003530:	461a      	mov	r2, r3
 8003532:	4603      	mov	r3, r0
 8003534:	817b      	strh	r3, [r7, #10]
 8003536:	460b      	mov	r3, r1
 8003538:	813b      	strh	r3, [r7, #8]
 800353a:	4613      	mov	r3, r2
 800353c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800353e:	897b      	ldrh	r3, [r7, #10]
 8003540:	2b60      	cmp	r3, #96	; 0x60
 8003542:	d107      	bne.n	8003554 <TIM_TIxExternalClockConfig+0x30>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8003544:	893a      	ldrh	r2, [r7, #8]
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	4611      	mov	r1, r2
 800354c:	2201      	movs	r2, #1
 800354e:	f000 f9bd 	bl	80038cc <TI2_Config>
 8003552:	e006      	b.n	8003562 <TIM_TIxExternalClockConfig+0x3e>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8003554:	893a      	ldrh	r2, [r7, #8]
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	4611      	mov	r1, r2
 800355c:	2201      	movs	r2, #1
 800355e:	f000 f973 	bl	8003848 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8003562:	897b      	ldrh	r3, [r7, #10]
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	4619      	mov	r1, r3
 8003568:	f000 f858 	bl	800361c <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	891b      	ldrh	r3, [r3, #8]
 8003570:	b29b      	uxth	r3, r3
 8003572:	f043 0307 	orr.w	r3, r3, #7
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	811a      	strh	r2, [r3, #8]
}
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop

08003584 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	4608      	mov	r0, r1
 800358e:	4611      	mov	r1, r2
 8003590:	461a      	mov	r2, r3
 8003592:	4603      	mov	r3, r0
 8003594:	817b      	strh	r3, [r7, #10]
 8003596:	460b      	mov	r3, r1
 8003598:	813b      	strh	r3, [r7, #8]
 800359a:	4613      	mov	r3, r2
 800359c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80035a2:	8979      	ldrh	r1, [r7, #10]
 80035a4:	893a      	ldrh	r2, [r7, #8]
 80035a6:	88fb      	ldrh	r3, [r7, #6]
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f8a7 	bl	80036fc <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	891b      	ldrh	r3, [r3, #8]
 80035b2:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80035b4:	8afb      	ldrh	r3, [r7, #22]
 80035b6:	f023 0307 	bic.w	r3, r3, #7
 80035ba:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 80035bc:	8afb      	ldrh	r3, [r7, #22]
 80035be:	f043 0307 	orr.w	r3, r3, #7
 80035c2:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80035c4:	8afb      	ldrh	r3, [r7, #22]
 80035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ca:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 80035cc:	8afb      	ldrh	r3, [r7, #22]
 80035ce:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80035d2:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8afa      	ldrh	r2, [r7, #22]
 80035d8:	811a      	strh	r2, [r3, #8]
}
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	4608      	mov	r0, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	461a      	mov	r2, r3
 80035ee:	4603      	mov	r3, r0
 80035f0:	817b      	strh	r3, [r7, #10]
 80035f2:	460b      	mov	r3, r1
 80035f4:	813b      	strh	r3, [r7, #8]
 80035f6:	4613      	mov	r3, r2
 80035f8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80035fa:	8979      	ldrh	r1, [r7, #10]
 80035fc:	893a      	ldrh	r2, [r7, #8]
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f87b 	bl	80036fc <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	891b      	ldrh	r3, [r3, #8]
 800360a:	b29b      	uxth	r3, r3
 800360c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	811a      	strh	r2, [r3, #8]
}
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	891b      	ldrh	r3, [r3, #8]
 8003630:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8003632:	89fb      	ldrh	r3, [r7, #14]
 8003634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003638:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800363a:	89fa      	ldrh	r2, [r7, #14]
 800363c:	887b      	ldrh	r3, [r7, #2]
 800363e:	4313      	orrs	r3, r2
 8003640:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	89fa      	ldrh	r2, [r7, #14]
 8003646:	811a      	strh	r2, [r3, #8]
}
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop

08003654 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	889b      	ldrh	r3, [r3, #4]
 8003664:	b29b      	uxth	r3, r3
 8003666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366a:	b29a      	uxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	889b      	ldrh	r3, [r3, #4]
 8003674:	b29a      	uxth	r2, r3
 8003676:	887b      	ldrh	r3, [r7, #2]
 8003678:	4313      	orrs	r3, r2
 800367a:	b29a      	uxth	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	809a      	strh	r2, [r3, #4]
}
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop

0800368c <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	891b      	ldrh	r3, [r3, #8]
 800369c:	b29b      	uxth	r3, r3
 800369e:	f023 0307 	bic.w	r3, r3, #7
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	891b      	ldrh	r3, [r3, #8]
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	887b      	ldrh	r3, [r7, #2]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	811a      	strh	r2, [r3, #8]
}
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop

080036c4 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	891b      	ldrh	r3, [r3, #8]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036da:	b29a      	uxth	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	891b      	ldrh	r3, [r3, #8]
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	811a      	strh	r2, [r3, #8]
}
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop

080036fc <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	4608      	mov	r0, r1
 8003706:	4611      	mov	r1, r2
 8003708:	461a      	mov	r2, r3
 800370a:	4603      	mov	r3, r0
 800370c:	817b      	strh	r3, [r7, #10]
 800370e:	460b      	mov	r3, r1
 8003710:	813b      	strh	r3, [r7, #8]
 8003712:	4613      	mov	r3, r2
 8003714:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	891b      	ldrh	r3, [r3, #8]
 800371e:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8003720:	8afb      	ldrh	r3, [r7, #22]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	b29a      	uxth	r2, r3
 800372c:	893b      	ldrh	r3, [r7, #8]
 800372e:	4313      	orrs	r3, r2
 8003730:	b29a      	uxth	r2, r3
 8003732:	897b      	ldrh	r3, [r7, #10]
 8003734:	4313      	orrs	r3, r2
 8003736:	b29a      	uxth	r2, r3
 8003738:	8afb      	ldrh	r3, [r7, #22]
 800373a:	4313      	orrs	r3, r2
 800373c:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8afa      	ldrh	r2, [r7, #22]
 8003742:	811a      	strh	r2, [r3, #8]
}
 8003744:	371c      	adds	r7, #28
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop

08003750 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	4608      	mov	r0, r1
 800375a:	4611      	mov	r1, r2
 800375c:	461a      	mov	r2, r3
 800375e:	4603      	mov	r3, r0
 8003760:	817b      	strh	r3, [r7, #10]
 8003762:	460b      	mov	r3, r1
 8003764:	813b      	strh	r3, [r7, #8]
 8003766:	4613      	mov	r3, r2
 8003768:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	891b      	ldrh	r3, [r3, #8]
 800377a:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8b1b      	ldrh	r3, [r3, #24]
 8003780:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8c1b      	ldrh	r3, [r3, #32]
 8003786:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8003788:	8afb      	ldrh	r3, [r7, #22]
 800378a:	f023 0307 	bic.w	r3, r3, #7
 800378e:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8003790:	8afa      	ldrh	r2, [r7, #22]
 8003792:	897b      	ldrh	r3, [r7, #10]
 8003794:	4313      	orrs	r3, r2
 8003796:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8003798:	8abb      	ldrh	r3, [r7, #20]
 800379a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800379e:	f023 0303 	bic.w	r3, r3, #3
 80037a2:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80037a4:	8abb      	ldrh	r3, [r7, #20]
 80037a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80037b0:	8a7b      	ldrh	r3, [r7, #18]
 80037b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80037b6:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	b29a      	uxth	r2, r3
 80037be:	893b      	ldrh	r3, [r7, #8]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	8a7b      	ldrh	r3, [r7, #18]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8afa      	ldrh	r2, [r7, #22]
 80037ce:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8aba      	ldrh	r2, [r7, #20]
 80037d4:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8a7a      	ldrh	r2, [r7, #18]
 80037da:	841a      	strh	r2, [r3, #32]
}
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop

080037e8 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	889b      	ldrh	r3, [r3, #4]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003804:	b29a      	uxth	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	809a      	strh	r2, [r3, #4]
 800380a:	e007      	b.n	800381c <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	889b      	ldrh	r3, [r3, #4]
 8003810:	b29b      	uxth	r3, r3
 8003812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003816:	b29a      	uxth	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	809a      	strh	r2, [r3, #4]
  }
}
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop

08003828 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	887a      	ldrh	r2, [r7, #2]
 8003838:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop

08003848 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	4608      	mov	r0, r1
 8003852:	4611      	mov	r1, r2
 8003854:	461a      	mov	r2, r3
 8003856:	4603      	mov	r3, r0
 8003858:	817b      	strh	r3, [r7, #10]
 800385a:	460b      	mov	r3, r1
 800385c:	813b      	strh	r3, [r7, #8]
 800385e:	4613      	mov	r3, r2
 8003860:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	82fb      	strh	r3, [r7, #22]
 8003866:	2300      	movs	r3, #0
 8003868:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8c1b      	ldrh	r3, [r3, #32]
 800386e:	b29b      	uxth	r3, r3
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8b1b      	ldrh	r3, [r3, #24]
 800387e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8c1b      	ldrh	r3, [r3, #32]
 8003884:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8003886:	8afb      	ldrh	r3, [r7, #22]
 8003888:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800388c:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	b29a      	uxth	r2, r3
 8003894:	893b      	ldrh	r3, [r7, #8]
 8003896:	4313      	orrs	r3, r2
 8003898:	b29a      	uxth	r2, r3
 800389a:	8afb      	ldrh	r3, [r7, #22]
 800389c:	4313      	orrs	r3, r2
 800389e:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038a0:	8abb      	ldrh	r3, [r7, #20]
 80038a2:	f023 030a 	bic.w	r3, r3, #10
 80038a6:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80038a8:	897a      	ldrh	r2, [r7, #10]
 80038aa:	8abb      	ldrh	r3, [r7, #20]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8afa      	ldrh	r2, [r7, #22]
 80038ba:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8aba      	ldrh	r2, [r7, #20]
 80038c0:	841a      	strh	r2, [r3, #32]
}
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	4608      	mov	r0, r1
 80038d6:	4611      	mov	r1, r2
 80038d8:	461a      	mov	r2, r3
 80038da:	4603      	mov	r3, r0
 80038dc:	817b      	strh	r3, [r7, #10]
 80038de:	460b      	mov	r3, r1
 80038e0:	813b      	strh	r3, [r7, #8]
 80038e2:	4613      	mov	r3, r2
 80038e4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	82fb      	strh	r3, [r7, #22]
 80038ea:	2300      	movs	r3, #0
 80038ec:	82bb      	strh	r3, [r7, #20]
 80038ee:	2300      	movs	r3, #0
 80038f0:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8c1b      	ldrh	r3, [r3, #32]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	f023 0310 	bic.w	r3, r3, #16
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8b1b      	ldrh	r3, [r3, #24]
 8003906:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8c1b      	ldrh	r3, [r3, #32]
 800390c:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 800390e:	897b      	ldrh	r3, [r7, #10]
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8003914:	8afb      	ldrh	r3, [r7, #22]
 8003916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800391a:	051b      	lsls	r3, r3, #20
 800391c:	0d1b      	lsrs	r3, r3, #20
 800391e:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	031b      	lsls	r3, r3, #12
 8003924:	b29a      	uxth	r2, r3
 8003926:	8afb      	ldrh	r3, [r7, #22]
 8003928:	4313      	orrs	r3, r2
 800392a:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800392c:	893b      	ldrh	r3, [r7, #8]
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	b29a      	uxth	r2, r3
 8003932:	8afb      	ldrh	r3, [r7, #22]
 8003934:	4313      	orrs	r3, r2
 8003936:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003938:	8abb      	ldrh	r3, [r7, #20]
 800393a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800393e:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8003940:	8a7a      	ldrh	r2, [r7, #18]
 8003942:	8abb      	ldrh	r3, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	b29b      	uxth	r3, r3
 8003948:	f043 0310 	orr.w	r3, r3, #16
 800394c:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8afa      	ldrh	r2, [r7, #22]
 8003952:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8aba      	ldrh	r2, [r7, #20]
 8003958:	841a      	strh	r2, [r3, #32]
}
 800395a:	371c      	adds	r7, #28
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	4608      	mov	r0, r1
 800396e:	4611      	mov	r1, r2
 8003970:	461a      	mov	r2, r3
 8003972:	4603      	mov	r3, r0
 8003974:	817b      	strh	r3, [r7, #10]
 8003976:	460b      	mov	r3, r1
 8003978:	813b      	strh	r3, [r7, #8]
 800397a:	4613      	mov	r3, r2
 800397c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	82fb      	strh	r3, [r7, #22]
 8003982:	2300      	movs	r3, #0
 8003984:	82bb      	strh	r3, [r7, #20]
 8003986:	2300      	movs	r3, #0
 8003988:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8c1b      	ldrh	r3, [r3, #32]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8b9b      	ldrh	r3, [r3, #28]
 800399e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8c1b      	ldrh	r3, [r3, #32]
 80039a4:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 80039a6:	897b      	ldrh	r3, [r7, #10]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 80039ac:	8afb      	ldrh	r3, [r7, #22]
 80039ae:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80039b2:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80039b4:	88fb      	ldrh	r3, [r7, #6]
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	893b      	ldrh	r3, [r7, #8]
 80039bc:	4313      	orrs	r3, r2
 80039be:	b29a      	uxth	r2, r3
 80039c0:	8afb      	ldrh	r3, [r7, #22]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80039c6:	8abb      	ldrh	r3, [r7, #20]
 80039c8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80039cc:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80039ce:	8a7a      	ldrh	r2, [r7, #18]
 80039d0:	8abb      	ldrh	r3, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039da:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8afa      	ldrh	r2, [r7, #22]
 80039e0:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8aba      	ldrh	r2, [r7, #20]
 80039e6:	841a      	strh	r2, [r3, #32]
}
 80039e8:	371c      	adds	r7, #28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop

080039f4 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	4608      	mov	r0, r1
 80039fe:	4611      	mov	r1, r2
 8003a00:	461a      	mov	r2, r3
 8003a02:	4603      	mov	r3, r0
 8003a04:	817b      	strh	r3, [r7, #10]
 8003a06:	460b      	mov	r3, r1
 8003a08:	813b      	strh	r3, [r7, #8]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	82fb      	strh	r3, [r7, #22]
 8003a12:	2300      	movs	r3, #0
 8003a14:	82bb      	strh	r3, [r7, #20]
 8003a16:	2300      	movs	r3, #0
 8003a18:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8c1b      	ldrh	r3, [r3, #32]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8b9b      	ldrh	r3, [r3, #28]
 8003a2e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8c1b      	ldrh	r3, [r3, #32]
 8003a34:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8003a36:	897b      	ldrh	r3, [r7, #10]
 8003a38:	031b      	lsls	r3, r3, #12
 8003a3a:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8003a3c:	8afb      	ldrh	r3, [r7, #22]
 8003a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a42:	051b      	lsls	r3, r3, #20
 8003a44:	0d1b      	lsrs	r3, r3, #20
 8003a46:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8003a48:	893b      	ldrh	r3, [r7, #8]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	8afb      	ldrh	r3, [r7, #22]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	031b      	lsls	r3, r3, #12
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	8afb      	ldrh	r3, [r7, #22]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003a60:	8abb      	ldrh	r3, [r7, #20]
 8003a62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a66:	045b      	lsls	r3, r3, #17
 8003a68:	0c5b      	lsrs	r3, r3, #17
 8003a6a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8003a6c:	8a7a      	ldrh	r2, [r7, #18]
 8003a6e:	8abb      	ldrh	r3, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a78:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8afa      	ldrh	r2, [r7, #22]
 8003a7e:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8aba      	ldrh	r2, [r7, #20]
 8003a84:	841a      	strh	r2, [r3, #32]
}
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8003a98:	4a05      	ldr	r2, [pc, #20]	; (8003ab0 <NVIC_PriorityGroupConfig+0x20>)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa4:	60d3      	str	r3, [r2, #12]
}
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	e000ed00 	.word	0xe000ed00

08003ab4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8003abc:	2300      	movs	r3, #0
 8003abe:	73fb      	strb	r3, [r7, #15]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	73bb      	strb	r3, [r7, #14]
 8003ac4:	230f      	movs	r3, #15
 8003ac6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	78db      	ldrb	r3, [r3, #3]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d038      	beq.n	8003b42 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003ad0:	4b26      	ldr	r3, [pc, #152]	; (8003b6c <NVIC_Init+0xb8>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	f1c3 0304 	rsb	r3, r3, #4
 8003ae4:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8003ae6:	7b7a      	ldrb	r2, [r7, #13]
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	fa42 f303 	asr.w	r3, r2, r3
 8003aee:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	785b      	ldrb	r3, [r3, #1]
 8003af4:	461a      	mov	r2, r3
 8003af6:	7bbb      	ldrb	r3, [r7, #14]
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	789a      	ldrb	r2, [r3, #2]
 8003b02:	7b7b      	ldrb	r3, [r7, #13]
 8003b04:	4013      	ands	r3, r2
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003b14:	4a16      	ldr	r2, [pc, #88]	; (8003b70 <NVIC_Init+0xbc>)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003b22:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <NVIC_Init+0xbc>)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	2101      	movs	r1, #1
 8003b38:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003b3c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8003b40:	e00f      	b.n	8003b62 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003b42:	490b      	ldr	r1, [pc, #44]	; (8003b70 <NVIC_Init+0xbc>)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	2201      	movs	r2, #1
 8003b58:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003b5a:	f100 0320 	add.w	r3, r0, #32
 8003b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	e000ed00 	.word	0xe000ed00
 8003b70:	e000e100 	.word	0xe000e100

08003b74 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8003b7e:	4907      	ldr	r1, [pc, #28]	; (8003b9c <NVIC_SetVectorTable+0x28>)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8003b86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	608b      	str	r3, [r1, #8]
}
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	e000ed00 	.word	0xe000ed00

08003ba0 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	460a      	mov	r2, r1
 8003baa:	71fb      	strb	r3, [r7, #7]
 8003bac:	4613      	mov	r3, r2
 8003bae:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8003bb0:	79bb      	ldrb	r3, [r7, #6]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d006      	beq.n	8003bc4 <NVIC_SystemLPConfig+0x24>
  {
    SCB->SCR |= LowPowerMode;
 8003bb6:	4909      	ldr	r1, [pc, #36]	; (8003bdc <NVIC_SystemLPConfig+0x3c>)
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <NVIC_SystemLPConfig+0x3c>)
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	610b      	str	r3, [r1, #16]
 8003bc2:	e006      	b.n	8003bd2 <NVIC_SystemLPConfig+0x32>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8003bc4:	4905      	ldr	r1, [pc, #20]	; (8003bdc <NVIC_SystemLPConfig+0x3c>)
 8003bc6:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <NVIC_SystemLPConfig+0x3c>)
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	4013      	ands	r3, r2
 8003bd0:	610b      	str	r3, [r1, #16]
  }
}
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	e000ed00 	.word	0xe000ed00

08003be0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d106      	bne.n	8003bfc <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8003bee:	4a09      	ldr	r2, [pc, #36]	; (8003c14 <SysTick_CLKSourceConfig+0x34>)
 8003bf0:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <SysTick_CLKSourceConfig+0x34>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f043 0304 	orr.w	r3, r3, #4
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	e005      	b.n	8003c08 <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8003bfc:	4a05      	ldr	r2, [pc, #20]	; (8003c14 <SysTick_CLKSourceConfig+0x34>)
 8003bfe:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <SysTick_CLKSourceConfig+0x34>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f023 0304 	bic.w	r3, r3, #4
 8003c06:	6013      	str	r3, [r2, #0]
  }
}
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	e000e010 	.word	0xe000e010
 8003c18:	080047dc 	.word	0x080047dc
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	20000874 	.word	0x20000874
 8003c24:	20000878 	.word	0x20000878
 8003c28:	200008d4 	.word	0x200008d4

08003c2c <exit>:
 8003c2c:	b508      	push	{r3, lr}
 8003c2e:	2100      	movs	r1, #0
 8003c30:	4604      	mov	r4, r0
 8003c32:	f000 f88b 	bl	8003d4c <__call_exitprocs>
 8003c36:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <exit+0x1c>)
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003c3c:	b103      	cbz	r3, 8003c40 <exit+0x14>
 8003c3e:	4798      	blx	r3
 8003c40:	4620      	mov	r0, r4
 8003c42:	f7fc fe01 	bl	8000848 <_exit>
 8003c46:	bf00      	nop
 8003c48:	080047a8 	.word	0x080047a8

08003c4c <__libc_init_array>:
 8003c4c:	b570      	push	{r4, r5, r6, lr}
 8003c4e:	4e0f      	ldr	r6, [pc, #60]	; (8003c8c <__libc_init_array+0x40>)
 8003c50:	4d0f      	ldr	r5, [pc, #60]	; (8003c90 <__libc_init_array+0x44>)
 8003c52:	1b76      	subs	r6, r6, r5
 8003c54:	10b6      	asrs	r6, r6, #2
 8003c56:	bf18      	it	ne
 8003c58:	2400      	movne	r4, #0
 8003c5a:	d005      	beq.n	8003c68 <__libc_init_array+0x1c>
 8003c5c:	3401      	adds	r4, #1
 8003c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c62:	4798      	blx	r3
 8003c64:	42a6      	cmp	r6, r4
 8003c66:	d1f9      	bne.n	8003c5c <__libc_init_array+0x10>
 8003c68:	4e0a      	ldr	r6, [pc, #40]	; (8003c94 <__libc_init_array+0x48>)
 8003c6a:	4d0b      	ldr	r5, [pc, #44]	; (8003c98 <__libc_init_array+0x4c>)
 8003c6c:	1b76      	subs	r6, r6, r5
 8003c6e:	f000 fd9f 	bl	80047b0 <_init>
 8003c72:	10b6      	asrs	r6, r6, #2
 8003c74:	bf18      	it	ne
 8003c76:	2400      	movne	r4, #0
 8003c78:	d006      	beq.n	8003c88 <__libc_init_array+0x3c>
 8003c7a:	3401      	adds	r4, #1
 8003c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c80:	4798      	blx	r3
 8003c82:	42a6      	cmp	r6, r4
 8003c84:	d1f9      	bne.n	8003c7a <__libc_init_array+0x2e>
 8003c86:	bd70      	pop	{r4, r5, r6, pc}
 8003c88:	bd70      	pop	{r4, r5, r6, pc}
 8003c8a:	bf00      	nop
 8003c8c:	080047d0 	.word	0x080047d0
 8003c90:	080047d0 	.word	0x080047d0
 8003c94:	080047d8 	.word	0x080047d8
 8003c98:	080047d0 	.word	0x080047d0

08003c9c <memset>:
 8003c9c:	b470      	push	{r4, r5, r6}
 8003c9e:	0784      	lsls	r4, r0, #30
 8003ca0:	d046      	beq.n	8003d30 <memset+0x94>
 8003ca2:	1e54      	subs	r4, r2, #1
 8003ca4:	2a00      	cmp	r2, #0
 8003ca6:	d041      	beq.n	8003d2c <memset+0x90>
 8003ca8:	b2cd      	uxtb	r5, r1
 8003caa:	4603      	mov	r3, r0
 8003cac:	e002      	b.n	8003cb4 <memset+0x18>
 8003cae:	1e62      	subs	r2, r4, #1
 8003cb0:	b3e4      	cbz	r4, 8003d2c <memset+0x90>
 8003cb2:	4614      	mov	r4, r2
 8003cb4:	f803 5b01 	strb.w	r5, [r3], #1
 8003cb8:	079a      	lsls	r2, r3, #30
 8003cba:	d1f8      	bne.n	8003cae <memset+0x12>
 8003cbc:	2c03      	cmp	r4, #3
 8003cbe:	d92e      	bls.n	8003d1e <memset+0x82>
 8003cc0:	b2cd      	uxtb	r5, r1
 8003cc2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003cc6:	2c0f      	cmp	r4, #15
 8003cc8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003ccc:	d919      	bls.n	8003d02 <memset+0x66>
 8003cce:	f103 0210 	add.w	r2, r3, #16
 8003cd2:	4626      	mov	r6, r4
 8003cd4:	3e10      	subs	r6, #16
 8003cd6:	2e0f      	cmp	r6, #15
 8003cd8:	f842 5c10 	str.w	r5, [r2, #-16]
 8003cdc:	f842 5c0c 	str.w	r5, [r2, #-12]
 8003ce0:	f842 5c08 	str.w	r5, [r2, #-8]
 8003ce4:	f842 5c04 	str.w	r5, [r2, #-4]
 8003ce8:	f102 0210 	add.w	r2, r2, #16
 8003cec:	d8f2      	bhi.n	8003cd4 <memset+0x38>
 8003cee:	f1a4 0210 	sub.w	r2, r4, #16
 8003cf2:	f022 020f 	bic.w	r2, r2, #15
 8003cf6:	f004 040f 	and.w	r4, r4, #15
 8003cfa:	3210      	adds	r2, #16
 8003cfc:	2c03      	cmp	r4, #3
 8003cfe:	4413      	add	r3, r2
 8003d00:	d90d      	bls.n	8003d1e <memset+0x82>
 8003d02:	461e      	mov	r6, r3
 8003d04:	4622      	mov	r2, r4
 8003d06:	3a04      	subs	r2, #4
 8003d08:	2a03      	cmp	r2, #3
 8003d0a:	f846 5b04 	str.w	r5, [r6], #4
 8003d0e:	d8fa      	bhi.n	8003d06 <memset+0x6a>
 8003d10:	1f22      	subs	r2, r4, #4
 8003d12:	f022 0203 	bic.w	r2, r2, #3
 8003d16:	3204      	adds	r2, #4
 8003d18:	4413      	add	r3, r2
 8003d1a:	f004 0403 	and.w	r4, r4, #3
 8003d1e:	b12c      	cbz	r4, 8003d2c <memset+0x90>
 8003d20:	b2c9      	uxtb	r1, r1
 8003d22:	441c      	add	r4, r3
 8003d24:	f803 1b01 	strb.w	r1, [r3], #1
 8003d28:	42a3      	cmp	r3, r4
 8003d2a:	d1fb      	bne.n	8003d24 <memset+0x88>
 8003d2c:	bc70      	pop	{r4, r5, r6}
 8003d2e:	4770      	bx	lr
 8003d30:	4614      	mov	r4, r2
 8003d32:	4603      	mov	r3, r0
 8003d34:	e7c2      	b.n	8003cbc <memset+0x20>
 8003d36:	bf00      	nop

08003d38 <register_fini>:
 8003d38:	4b02      	ldr	r3, [pc, #8]	; (8003d44 <register_fini+0xc>)
 8003d3a:	b113      	cbz	r3, 8003d42 <register_fini+0xa>
 8003d3c:	4802      	ldr	r0, [pc, #8]	; (8003d48 <register_fini+0x10>)
 8003d3e:	f000 b86f 	b.w	8003e20 <atexit>
 8003d42:	4770      	bx	lr
 8003d44:	00000000 	.word	0x00000000
 8003d48:	08003e2d 	.word	0x08003e2d

08003d4c <__call_exitprocs>:
 8003d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d50:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <__call_exitprocs+0xcc>)
 8003d52:	b083      	sub	sp, #12
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003d5c:	4681      	mov	r9, r0
 8003d5e:	460e      	mov	r6, r1
 8003d60:	9301      	str	r3, [sp, #4]
 8003d62:	9b00      	ldr	r3, [sp, #0]
 8003d64:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
 8003d68:	b327      	cbz	r7, 8003db4 <__call_exitprocs+0x68>
 8003d6a:	f8dd a004 	ldr.w	sl, [sp, #4]
 8003d6e:	687c      	ldr	r4, [r7, #4]
 8003d70:	1e65      	subs	r5, r4, #1
 8003d72:	d40e      	bmi.n	8003d92 <__call_exitprocs+0x46>
 8003d74:	3401      	adds	r4, #1
 8003d76:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8003d7a:	f04f 0800 	mov.w	r8, #0
 8003d7e:	b1e6      	cbz	r6, 8003dba <__call_exitprocs+0x6e>
 8003d80:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d84:	42b3      	cmp	r3, r6
 8003d86:	d018      	beq.n	8003dba <__call_exitprocs+0x6e>
 8003d88:	3d01      	subs	r5, #1
 8003d8a:	1c6b      	adds	r3, r5, #1
 8003d8c:	f1a4 0404 	sub.w	r4, r4, #4
 8003d90:	d1f5      	bne.n	8003d7e <__call_exitprocs+0x32>
 8003d92:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <__call_exitprocs+0xd0>)
 8003d94:	b173      	cbz	r3, 8003db4 <__call_exitprocs+0x68>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d136      	bne.n	8003e0a <__call_exitprocs+0xbe>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d034      	beq.n	8003e0c <__call_exitprocs+0xc0>
 8003da2:	4638      	mov	r0, r7
 8003da4:	f8ca 3000 	str.w	r3, [sl]
 8003da8:	f3af 8000 	nop.w
 8003dac:	f8da 7000 	ldr.w	r7, [sl]
 8003db0:	2f00      	cmp	r7, #0
 8003db2:	d1dc      	bne.n	8003d6e <__call_exitprocs+0x22>
 8003db4:	b003      	add	sp, #12
 8003db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6822      	ldr	r2, [r4, #0]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	42ab      	cmp	r3, r5
 8003dc2:	bf0c      	ite	eq
 8003dc4:	607d      	streq	r5, [r7, #4]
 8003dc6:	f8c4 8000 	strne.w	r8, [r4]
 8003dca:	2a00      	cmp	r2, #0
 8003dcc:	d0dc      	beq.n	8003d88 <__call_exitprocs+0x3c>
 8003dce:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003dd2:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	40a9      	lsls	r1, r5
 8003dda:	4219      	tst	r1, r3
 8003ddc:	d108      	bne.n	8003df0 <__call_exitprocs+0xa4>
 8003dde:	4790      	blx	r2
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	455b      	cmp	r3, fp
 8003de4:	d1bd      	bne.n	8003d62 <__call_exitprocs+0x16>
 8003de6:	f8da 3000 	ldr.w	r3, [sl]
 8003dea:	42bb      	cmp	r3, r7
 8003dec:	d0cc      	beq.n	8003d88 <__call_exitprocs+0x3c>
 8003dee:	e7b8      	b.n	8003d62 <__call_exitprocs+0x16>
 8003df0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003df4:	4219      	tst	r1, r3
 8003df6:	d104      	bne.n	8003e02 <__call_exitprocs+0xb6>
 8003df8:	4648      	mov	r0, r9
 8003dfa:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003dfe:	4790      	blx	r2
 8003e00:	e7ee      	b.n	8003de0 <__call_exitprocs+0x94>
 8003e02:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003e06:	4790      	blx	r2
 8003e08:	e7ea      	b.n	8003de0 <__call_exitprocs+0x94>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	46ba      	mov	sl, r7
 8003e0e:	461f      	mov	r7, r3
 8003e10:	2f00      	cmp	r7, #0
 8003e12:	d1ac      	bne.n	8003d6e <__call_exitprocs+0x22>
 8003e14:	e7ce      	b.n	8003db4 <__call_exitprocs+0x68>
 8003e16:	bf00      	nop
 8003e18:	080047a8 	.word	0x080047a8
 8003e1c:	00000000 	.word	0x00000000

08003e20 <atexit>:
 8003e20:	4601      	mov	r1, r0
 8003e22:	2000      	movs	r0, #0
 8003e24:	4602      	mov	r2, r0
 8003e26:	4603      	mov	r3, r0
 8003e28:	f000 b816 	b.w	8003e58 <__register_exitproc>

08003e2c <__libc_fini_array>:
 8003e2c:	b538      	push	{r3, r4, r5, lr}
 8003e2e:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <__libc_fini_array+0x24>)
 8003e30:	4d08      	ldr	r5, [pc, #32]	; (8003e54 <__libc_fini_array+0x28>)
 8003e32:	1aed      	subs	r5, r5, r3
 8003e34:	10ac      	asrs	r4, r5, #2
 8003e36:	bf18      	it	ne
 8003e38:	18ed      	addne	r5, r5, r3
 8003e3a:	d005      	beq.n	8003e48 <__libc_fini_array+0x1c>
 8003e3c:	3c01      	subs	r4, #1
 8003e3e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8003e42:	4798      	blx	r3
 8003e44:	2c00      	cmp	r4, #0
 8003e46:	d1f9      	bne.n	8003e3c <__libc_fini_array+0x10>
 8003e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e4c:	f000 bcb6 	b.w	80047bc <_fini>
 8003e50:	080047d8 	.word	0x080047d8
 8003e54:	080047dc 	.word	0x080047dc

08003e58 <__register_exitproc>:
 8003e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e5c:	4c25      	ldr	r4, [pc, #148]	; (8003ef4 <__register_exitproc+0x9c>)
 8003e5e:	6825      	ldr	r5, [r4, #0]
 8003e60:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8003e64:	4606      	mov	r6, r0
 8003e66:	4688      	mov	r8, r1
 8003e68:	4692      	mov	sl, r2
 8003e6a:	4699      	mov	r9, r3
 8003e6c:	b3cc      	cbz	r4, 8003ee2 <__register_exitproc+0x8a>
 8003e6e:	6860      	ldr	r0, [r4, #4]
 8003e70:	281f      	cmp	r0, #31
 8003e72:	dc18      	bgt.n	8003ea6 <__register_exitproc+0x4e>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	b17e      	cbz	r6, 8003e98 <__register_exitproc+0x40>
 8003e78:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8003e82:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 8003e86:	fa01 f200 	lsl.w	r2, r1, r0
 8003e8a:	4317      	orrs	r7, r2
 8003e8c:	2e02      	cmp	r6, #2
 8003e8e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8003e92:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8003e96:	d01e      	beq.n	8003ed6 <__register_exitproc+0x7e>
 8003e98:	3002      	adds	r0, #2
 8003e9a:	6063      	str	r3, [r4, #4]
 8003e9c:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <__register_exitproc+0xa0>)
 8003ea8:	b303      	cbz	r3, 8003eec <__register_exitproc+0x94>
 8003eaa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003eae:	f3af 8000 	nop.w
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	b1d0      	cbz	r0, 8003eec <__register_exitproc+0x94>
 8003eb6:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8003eba:	2700      	movs	r7, #0
 8003ebc:	e880 0088 	stmia.w	r0, {r3, r7}
 8003ec0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8003ecc:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8003ed0:	2e00      	cmp	r6, #0
 8003ed2:	d0e1      	beq.n	8003e98 <__register_exitproc+0x40>
 8003ed4:	e7d0      	b.n	8003e78 <__register_exitproc+0x20>
 8003ed6:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8003eda:	430a      	orrs	r2, r1
 8003edc:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8003ee0:	e7da      	b.n	8003e98 <__register_exitproc+0x40>
 8003ee2:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8003ee6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8003eea:	e7c0      	b.n	8003e6e <__register_exitproc+0x16>
 8003eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef4:	080047a8 	.word	0x080047a8
 8003ef8:	00000000 	.word	0x00000000

08003efc <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003efc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003efe:	e003      	b.n	8003f08 <LoopCopyDataInit>

08003f00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f00:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003f02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f06:	3104      	adds	r1, #4

08003f08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f08:	480a      	ldr	r0, [pc, #40]	; (8003f34 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003f0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f10:	d3f6      	bcc.n	8003f00 <CopyDataInit>
  ldr  r2, =_sbss
 8003f12:	4a0a      	ldr	r2, [pc, #40]	; (8003f3c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003f14:	e002      	b.n	8003f1c <LoopFillZerobss>

08003f16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f18:	f842 3b04 	str.w	r3, [r2], #4

08003f1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f1c:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003f1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f20:	d3f9      	bcc.n	8003f16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f22:	f7fc fdd7 	bl	8000ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f26:	f7ff fe91 	bl	8003c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f2a:	f7fc f995 	bl	8000258 <main>
  bx  lr    
 8003f2e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8003f30:	080047dc 	.word	0x080047dc
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003f38:	20000874 	.word	0x20000874
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8003f3c:	20000878 	.word	0x20000878
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f40:	200008d4 	.word	0x200008d4

08003f44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f44:	e7fe      	b.n	8003f44 <ADC_IRQHandler>
	...

08003f48 <cleanup_glue>:
 8003f48:	b538      	push	{r3, r4, r5, lr}
 8003f4a:	460c      	mov	r4, r1
 8003f4c:	6809      	ldr	r1, [r1, #0]
 8003f4e:	4605      	mov	r5, r0
 8003f50:	b109      	cbz	r1, 8003f56 <cleanup_glue+0xe>
 8003f52:	f7ff fff9 	bl	8003f48 <cleanup_glue>
 8003f56:	4628      	mov	r0, r5
 8003f58:	4621      	mov	r1, r4
 8003f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f5e:	f000 b893 	b.w	8004088 <_free_r>
 8003f62:	bf00      	nop

08003f64 <_reclaim_reent>:
 8003f64:	4b20      	ldr	r3, [pc, #128]	; (8003fe8 <_reclaim_reent+0x84>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4298      	cmp	r0, r3
 8003f6a:	d03c      	beq.n	8003fe6 <_reclaim_reent+0x82>
 8003f6c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003f6e:	b570      	push	{r4, r5, r6, lr}
 8003f70:	4605      	mov	r5, r0
 8003f72:	b18b      	cbz	r3, 8003f98 <_reclaim_reent+0x34>
 8003f74:	2600      	movs	r6, #0
 8003f76:	5999      	ldr	r1, [r3, r6]
 8003f78:	b139      	cbz	r1, 8003f8a <_reclaim_reent+0x26>
 8003f7a:	680c      	ldr	r4, [r1, #0]
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f000 f883 	bl	8004088 <_free_r>
 8003f82:	4621      	mov	r1, r4
 8003f84:	2c00      	cmp	r4, #0
 8003f86:	d1f8      	bne.n	8003f7a <_reclaim_reent+0x16>
 8003f88:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003f8a:	3604      	adds	r6, #4
 8003f8c:	2e80      	cmp	r6, #128	; 0x80
 8003f8e:	d1f2      	bne.n	8003f76 <_reclaim_reent+0x12>
 8003f90:	4619      	mov	r1, r3
 8003f92:	4628      	mov	r0, r5
 8003f94:	f000 f878 	bl	8004088 <_free_r>
 8003f98:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8003f9a:	b111      	cbz	r1, 8003fa2 <_reclaim_reent+0x3e>
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	f000 f873 	bl	8004088 <_free_r>
 8003fa2:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 8003fa6:	b151      	cbz	r1, 8003fbe <_reclaim_reent+0x5a>
 8003fa8:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8003fac:	42b1      	cmp	r1, r6
 8003fae:	d006      	beq.n	8003fbe <_reclaim_reent+0x5a>
 8003fb0:	680c      	ldr	r4, [r1, #0]
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	f000 f868 	bl	8004088 <_free_r>
 8003fb8:	42a6      	cmp	r6, r4
 8003fba:	4621      	mov	r1, r4
 8003fbc:	d1f8      	bne.n	8003fb0 <_reclaim_reent+0x4c>
 8003fbe:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8003fc0:	b111      	cbz	r1, 8003fc8 <_reclaim_reent+0x64>
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	f000 f860 	bl	8004088 <_free_r>
 8003fc8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003fca:	b903      	cbnz	r3, 8003fce <_reclaim_reent+0x6a>
 8003fcc:	bd70      	pop	{r4, r5, r6, pc}
 8003fce:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	4798      	blx	r3
 8003fd4:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 8003fd8:	2900      	cmp	r1, #0
 8003fda:	d0f7      	beq.n	8003fcc <_reclaim_reent+0x68>
 8003fdc:	4628      	mov	r0, r5
 8003fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003fe2:	f7ff bfb1 	b.w	8003f48 <cleanup_glue>
 8003fe6:	4770      	bx	lr
 8003fe8:	20000460 	.word	0x20000460

08003fec <_malloc_trim_r>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	4f23      	ldr	r7, [pc, #140]	; (800407c <_malloc_trim_r+0x90>)
 8003ff0:	460c      	mov	r4, r1
 8003ff2:	4606      	mov	r6, r0
 8003ff4:	f000 fbae 	bl	8004754 <__malloc_lock>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	685d      	ldr	r5, [r3, #4]
 8003ffc:	f025 0503 	bic.w	r5, r5, #3
 8004000:	1b29      	subs	r1, r5, r4
 8004002:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8004006:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800400a:	f021 010f 	bic.w	r1, r1, #15
 800400e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8004012:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8004016:	db07      	blt.n	8004028 <_malloc_trim_r+0x3c>
 8004018:	4630      	mov	r0, r6
 800401a:	2100      	movs	r1, #0
 800401c:	f000 fb9e 	bl	800475c <_sbrk_r>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	442b      	add	r3, r5
 8004024:	4298      	cmp	r0, r3
 8004026:	d004      	beq.n	8004032 <_malloc_trim_r+0x46>
 8004028:	4630      	mov	r0, r6
 800402a:	f000 fb95 	bl	8004758 <__malloc_unlock>
 800402e:	2000      	movs	r0, #0
 8004030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004032:	4630      	mov	r0, r6
 8004034:	4261      	negs	r1, r4
 8004036:	f000 fb91 	bl	800475c <_sbrk_r>
 800403a:	3001      	adds	r0, #1
 800403c:	d00d      	beq.n	800405a <_malloc_trim_r+0x6e>
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <_malloc_trim_r+0x94>)
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	6819      	ldr	r1, [r3, #0]
 8004044:	1b2d      	subs	r5, r5, r4
 8004046:	f045 0501 	orr.w	r5, r5, #1
 800404a:	4630      	mov	r0, r6
 800404c:	1b09      	subs	r1, r1, r4
 800404e:	6055      	str	r5, [r2, #4]
 8004050:	6019      	str	r1, [r3, #0]
 8004052:	f000 fb81 	bl	8004758 <__malloc_unlock>
 8004056:	2001      	movs	r0, #1
 8004058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800405a:	4630      	mov	r0, r6
 800405c:	2100      	movs	r1, #0
 800405e:	f000 fb7d 	bl	800475c <_sbrk_r>
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	1a83      	subs	r3, r0, r2
 8004066:	2b0f      	cmp	r3, #15
 8004068:	ddde      	ble.n	8004028 <_malloc_trim_r+0x3c>
 800406a:	4c06      	ldr	r4, [pc, #24]	; (8004084 <_malloc_trim_r+0x98>)
 800406c:	4904      	ldr	r1, [pc, #16]	; (8004080 <_malloc_trim_r+0x94>)
 800406e:	6824      	ldr	r4, [r4, #0]
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	1b00      	subs	r0, r0, r4
 8004076:	6053      	str	r3, [r2, #4]
 8004078:	6008      	str	r0, [r1, #0]
 800407a:	e7d5      	b.n	8004028 <_malloc_trim_r+0x3c>
 800407c:	20000464 	.word	0x20000464
 8004080:	200008a8 	.word	0x200008a8
 8004084:	20000870 	.word	0x20000870

08004088 <_free_r>:
 8004088:	2900      	cmp	r1, #0
 800408a:	d04e      	beq.n	800412a <_free_r+0xa2>
 800408c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004090:	460c      	mov	r4, r1
 8004092:	4680      	mov	r8, r0
 8004094:	f000 fb5e 	bl	8004754 <__malloc_lock>
 8004098:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800409c:	4962      	ldr	r1, [pc, #392]	; (8004228 <_free_r+0x1a0>)
 800409e:	f027 0201 	bic.w	r2, r7, #1
 80040a2:	f1a4 0508 	sub.w	r5, r4, #8
 80040a6:	18ab      	adds	r3, r5, r2
 80040a8:	688e      	ldr	r6, [r1, #8]
 80040aa:	6858      	ldr	r0, [r3, #4]
 80040ac:	429e      	cmp	r6, r3
 80040ae:	f020 0003 	bic.w	r0, r0, #3
 80040b2:	d05a      	beq.n	800416a <_free_r+0xe2>
 80040b4:	07fe      	lsls	r6, r7, #31
 80040b6:	6058      	str	r0, [r3, #4]
 80040b8:	d40b      	bmi.n	80040d2 <_free_r+0x4a>
 80040ba:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80040be:	1bed      	subs	r5, r5, r7
 80040c0:	f101 0e08 	add.w	lr, r1, #8
 80040c4:	68ac      	ldr	r4, [r5, #8]
 80040c6:	4574      	cmp	r4, lr
 80040c8:	443a      	add	r2, r7
 80040ca:	d067      	beq.n	800419c <_free_r+0x114>
 80040cc:	68ef      	ldr	r7, [r5, #12]
 80040ce:	60e7      	str	r7, [r4, #12]
 80040d0:	60bc      	str	r4, [r7, #8]
 80040d2:	181c      	adds	r4, r3, r0
 80040d4:	6864      	ldr	r4, [r4, #4]
 80040d6:	07e4      	lsls	r4, r4, #31
 80040d8:	d40c      	bmi.n	80040f4 <_free_r+0x6c>
 80040da:	4f54      	ldr	r7, [pc, #336]	; (800422c <_free_r+0x1a4>)
 80040dc:	689c      	ldr	r4, [r3, #8]
 80040de:	42bc      	cmp	r4, r7
 80040e0:	4402      	add	r2, r0
 80040e2:	d07c      	beq.n	80041de <_free_r+0x156>
 80040e4:	68d8      	ldr	r0, [r3, #12]
 80040e6:	60e0      	str	r0, [r4, #12]
 80040e8:	f042 0301 	orr.w	r3, r2, #1
 80040ec:	6084      	str	r4, [r0, #8]
 80040ee:	606b      	str	r3, [r5, #4]
 80040f0:	50aa      	str	r2, [r5, r2]
 80040f2:	e003      	b.n	80040fc <_free_r+0x74>
 80040f4:	f042 0301 	orr.w	r3, r2, #1
 80040f8:	606b      	str	r3, [r5, #4]
 80040fa:	50aa      	str	r2, [r5, r2]
 80040fc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004100:	d214      	bcs.n	800412c <_free_r+0xa4>
 8004102:	08d2      	lsrs	r2, r2, #3
 8004104:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8004108:	6848      	ldr	r0, [r1, #4]
 800410a:	689f      	ldr	r7, [r3, #8]
 800410c:	60af      	str	r7, [r5, #8]
 800410e:	1092      	asrs	r2, r2, #2
 8004110:	2401      	movs	r4, #1
 8004112:	fa04 f202 	lsl.w	r2, r4, r2
 8004116:	4310      	orrs	r0, r2
 8004118:	60eb      	str	r3, [r5, #12]
 800411a:	6048      	str	r0, [r1, #4]
 800411c:	609d      	str	r5, [r3, #8]
 800411e:	60fd      	str	r5, [r7, #12]
 8004120:	4640      	mov	r0, r8
 8004122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004126:	f000 bb17 	b.w	8004758 <__malloc_unlock>
 800412a:	4770      	bx	lr
 800412c:	0a53      	lsrs	r3, r2, #9
 800412e:	2b04      	cmp	r3, #4
 8004130:	d847      	bhi.n	80041c2 <_free_r+0x13a>
 8004132:	0993      	lsrs	r3, r2, #6
 8004134:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8004138:	0060      	lsls	r0, r4, #1
 800413a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800413e:	493a      	ldr	r1, [pc, #232]	; (8004228 <_free_r+0x1a0>)
 8004140:	6883      	ldr	r3, [r0, #8]
 8004142:	4283      	cmp	r3, r0
 8004144:	d043      	beq.n	80041ce <_free_r+0x146>
 8004146:	6859      	ldr	r1, [r3, #4]
 8004148:	f021 0103 	bic.w	r1, r1, #3
 800414c:	4291      	cmp	r1, r2
 800414e:	d902      	bls.n	8004156 <_free_r+0xce>
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	4298      	cmp	r0, r3
 8004154:	d1f7      	bne.n	8004146 <_free_r+0xbe>
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	60ea      	str	r2, [r5, #12]
 800415a:	60ab      	str	r3, [r5, #8]
 800415c:	4640      	mov	r0, r8
 800415e:	6095      	str	r5, [r2, #8]
 8004160:	60dd      	str	r5, [r3, #12]
 8004162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004166:	f000 baf7 	b.w	8004758 <__malloc_unlock>
 800416a:	07ff      	lsls	r7, r7, #31
 800416c:	4402      	add	r2, r0
 800416e:	d407      	bmi.n	8004180 <_free_r+0xf8>
 8004170:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8004174:	1aed      	subs	r5, r5, r3
 8004176:	441a      	add	r2, r3
 8004178:	68a8      	ldr	r0, [r5, #8]
 800417a:	68eb      	ldr	r3, [r5, #12]
 800417c:	60c3      	str	r3, [r0, #12]
 800417e:	6098      	str	r0, [r3, #8]
 8004180:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <_free_r+0x1a8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0001 	orr.w	r0, r2, #1
 8004188:	429a      	cmp	r2, r3
 800418a:	6068      	str	r0, [r5, #4]
 800418c:	608d      	str	r5, [r1, #8]
 800418e:	d3c7      	bcc.n	8004120 <_free_r+0x98>
 8004190:	4b28      	ldr	r3, [pc, #160]	; (8004234 <_free_r+0x1ac>)
 8004192:	4640      	mov	r0, r8
 8004194:	6819      	ldr	r1, [r3, #0]
 8004196:	f7ff ff29 	bl	8003fec <_malloc_trim_r>
 800419a:	e7c1      	b.n	8004120 <_free_r+0x98>
 800419c:	1819      	adds	r1, r3, r0
 800419e:	6849      	ldr	r1, [r1, #4]
 80041a0:	07c9      	lsls	r1, r1, #31
 80041a2:	d409      	bmi.n	80041b8 <_free_r+0x130>
 80041a4:	68d9      	ldr	r1, [r3, #12]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	4402      	add	r2, r0
 80041aa:	f042 0001 	orr.w	r0, r2, #1
 80041ae:	60d9      	str	r1, [r3, #12]
 80041b0:	608b      	str	r3, [r1, #8]
 80041b2:	6068      	str	r0, [r5, #4]
 80041b4:	50aa      	str	r2, [r5, r2]
 80041b6:	e7b3      	b.n	8004120 <_free_r+0x98>
 80041b8:	f042 0301 	orr.w	r3, r2, #1
 80041bc:	606b      	str	r3, [r5, #4]
 80041be:	50aa      	str	r2, [r5, r2]
 80041c0:	e7ae      	b.n	8004120 <_free_r+0x98>
 80041c2:	2b14      	cmp	r3, #20
 80041c4:	d814      	bhi.n	80041f0 <_free_r+0x168>
 80041c6:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 80041ca:	0060      	lsls	r0, r4, #1
 80041cc:	e7b5      	b.n	800413a <_free_r+0xb2>
 80041ce:	684a      	ldr	r2, [r1, #4]
 80041d0:	10a4      	asrs	r4, r4, #2
 80041d2:	2001      	movs	r0, #1
 80041d4:	40a0      	lsls	r0, r4
 80041d6:	4302      	orrs	r2, r0
 80041d8:	604a      	str	r2, [r1, #4]
 80041da:	461a      	mov	r2, r3
 80041dc:	e7bc      	b.n	8004158 <_free_r+0xd0>
 80041de:	f042 0301 	orr.w	r3, r2, #1
 80041e2:	614d      	str	r5, [r1, #20]
 80041e4:	610d      	str	r5, [r1, #16]
 80041e6:	60ec      	str	r4, [r5, #12]
 80041e8:	60ac      	str	r4, [r5, #8]
 80041ea:	606b      	str	r3, [r5, #4]
 80041ec:	50aa      	str	r2, [r5, r2]
 80041ee:	e797      	b.n	8004120 <_free_r+0x98>
 80041f0:	2b54      	cmp	r3, #84	; 0x54
 80041f2:	d804      	bhi.n	80041fe <_free_r+0x176>
 80041f4:	0b13      	lsrs	r3, r2, #12
 80041f6:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 80041fa:	0060      	lsls	r0, r4, #1
 80041fc:	e79d      	b.n	800413a <_free_r+0xb2>
 80041fe:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004202:	d804      	bhi.n	800420e <_free_r+0x186>
 8004204:	0bd3      	lsrs	r3, r2, #15
 8004206:	f103 0477 	add.w	r4, r3, #119	; 0x77
 800420a:	0060      	lsls	r0, r4, #1
 800420c:	e795      	b.n	800413a <_free_r+0xb2>
 800420e:	f240 5054 	movw	r0, #1364	; 0x554
 8004212:	4283      	cmp	r3, r0
 8004214:	d804      	bhi.n	8004220 <_free_r+0x198>
 8004216:	0c93      	lsrs	r3, r2, #18
 8004218:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 800421c:	0060      	lsls	r0, r4, #1
 800421e:	e78c      	b.n	800413a <_free_r+0xb2>
 8004220:	20fc      	movs	r0, #252	; 0xfc
 8004222:	247e      	movs	r4, #126	; 0x7e
 8004224:	e789      	b.n	800413a <_free_r+0xb2>
 8004226:	bf00      	nop
 8004228:	20000464 	.word	0x20000464
 800422c:	2000046c 	.word	0x2000046c
 8004230:	2000086c 	.word	0x2000086c
 8004234:	200008a4 	.word	0x200008a4

08004238 <_malloc_r>:
 8004238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423c:	f101 050b 	add.w	r5, r1, #11
 8004240:	2d16      	cmp	r5, #22
 8004242:	b083      	sub	sp, #12
 8004244:	4606      	mov	r6, r0
 8004246:	d927      	bls.n	8004298 <_malloc_r+0x60>
 8004248:	f035 0507 	bics.w	r5, r5, #7
 800424c:	f100 80b6 	bmi.w	80043bc <_malloc_r+0x184>
 8004250:	42a9      	cmp	r1, r5
 8004252:	f200 80b3 	bhi.w	80043bc <_malloc_r+0x184>
 8004256:	f000 fa7d 	bl	8004754 <__malloc_lock>
 800425a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800425e:	d222      	bcs.n	80042a6 <_malloc_r+0x6e>
 8004260:	4fc2      	ldr	r7, [pc, #776]	; (800456c <_malloc_r+0x334>)
 8004262:	08e8      	lsrs	r0, r5, #3
 8004264:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8004268:	68dc      	ldr	r4, [r3, #12]
 800426a:	429c      	cmp	r4, r3
 800426c:	f000 81c9 	beq.w	8004602 <_malloc_r+0x3ca>
 8004270:	6863      	ldr	r3, [r4, #4]
 8004272:	68e1      	ldr	r1, [r4, #12]
 8004274:	68a5      	ldr	r5, [r4, #8]
 8004276:	f023 0303 	bic.w	r3, r3, #3
 800427a:	4423      	add	r3, r4
 800427c:	4630      	mov	r0, r6
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	60e9      	str	r1, [r5, #12]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	608d      	str	r5, [r1, #8]
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	f000 fa65 	bl	8004758 <__malloc_unlock>
 800428e:	3408      	adds	r4, #8
 8004290:	4620      	mov	r0, r4
 8004292:	b003      	add	sp, #12
 8004294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004298:	2910      	cmp	r1, #16
 800429a:	f200 808f 	bhi.w	80043bc <_malloc_r+0x184>
 800429e:	f000 fa59 	bl	8004754 <__malloc_lock>
 80042a2:	2510      	movs	r5, #16
 80042a4:	e7dc      	b.n	8004260 <_malloc_r+0x28>
 80042a6:	0a68      	lsrs	r0, r5, #9
 80042a8:	f000 808f 	beq.w	80043ca <_malloc_r+0x192>
 80042ac:	2804      	cmp	r0, #4
 80042ae:	f200 8154 	bhi.w	800455a <_malloc_r+0x322>
 80042b2:	09a8      	lsrs	r0, r5, #6
 80042b4:	3038      	adds	r0, #56	; 0x38
 80042b6:	0041      	lsls	r1, r0, #1
 80042b8:	4fac      	ldr	r7, [pc, #688]	; (800456c <_malloc_r+0x334>)
 80042ba:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80042be:	68cc      	ldr	r4, [r1, #12]
 80042c0:	42a1      	cmp	r1, r4
 80042c2:	d106      	bne.n	80042d2 <_malloc_r+0x9a>
 80042c4:	e00c      	b.n	80042e0 <_malloc_r+0xa8>
 80042c6:	2a00      	cmp	r2, #0
 80042c8:	f280 8082 	bge.w	80043d0 <_malloc_r+0x198>
 80042cc:	68e4      	ldr	r4, [r4, #12]
 80042ce:	42a1      	cmp	r1, r4
 80042d0:	d006      	beq.n	80042e0 <_malloc_r+0xa8>
 80042d2:	6863      	ldr	r3, [r4, #4]
 80042d4:	f023 0303 	bic.w	r3, r3, #3
 80042d8:	1b5a      	subs	r2, r3, r5
 80042da:	2a0f      	cmp	r2, #15
 80042dc:	ddf3      	ble.n	80042c6 <_malloc_r+0x8e>
 80042de:	3801      	subs	r0, #1
 80042e0:	3001      	adds	r0, #1
 80042e2:	49a2      	ldr	r1, [pc, #648]	; (800456c <_malloc_r+0x334>)
 80042e4:	693c      	ldr	r4, [r7, #16]
 80042e6:	f101 0e08 	add.w	lr, r1, #8
 80042ea:	4574      	cmp	r4, lr
 80042ec:	f000 817e 	beq.w	80045ec <_malloc_r+0x3b4>
 80042f0:	6863      	ldr	r3, [r4, #4]
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	1b5a      	subs	r2, r3, r5
 80042f8:	2a0f      	cmp	r2, #15
 80042fa:	f300 8164 	bgt.w	80045c6 <_malloc_r+0x38e>
 80042fe:	2a00      	cmp	r2, #0
 8004300:	f8c1 e014 	str.w	lr, [r1, #20]
 8004304:	f8c1 e010 	str.w	lr, [r1, #16]
 8004308:	da73      	bge.n	80043f2 <_malloc_r+0x1ba>
 800430a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800430e:	f080 8139 	bcs.w	8004584 <_malloc_r+0x34c>
 8004312:	08db      	lsrs	r3, r3, #3
 8004314:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8004318:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 800431c:	684a      	ldr	r2, [r1, #4]
 800431e:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8004322:	f8c4 9008 	str.w	r9, [r4, #8]
 8004326:	2301      	movs	r3, #1
 8004328:	fa03 f30c 	lsl.w	r3, r3, ip
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c4 800c 	str.w	r8, [r4, #12]
 8004332:	604b      	str	r3, [r1, #4]
 8004334:	f8c8 4008 	str.w	r4, [r8, #8]
 8004338:	f8c9 400c 	str.w	r4, [r9, #12]
 800433c:	1082      	asrs	r2, r0, #2
 800433e:	2401      	movs	r4, #1
 8004340:	4094      	lsls	r4, r2
 8004342:	429c      	cmp	r4, r3
 8004344:	d862      	bhi.n	800440c <_malloc_r+0x1d4>
 8004346:	4223      	tst	r3, r4
 8004348:	d106      	bne.n	8004358 <_malloc_r+0x120>
 800434a:	f020 0003 	bic.w	r0, r0, #3
 800434e:	0064      	lsls	r4, r4, #1
 8004350:	4223      	tst	r3, r4
 8004352:	f100 0004 	add.w	r0, r0, #4
 8004356:	d0fa      	beq.n	800434e <_malloc_r+0x116>
 8004358:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 800435c:	46c4      	mov	ip, r8
 800435e:	4681      	mov	r9, r0
 8004360:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8004364:	459c      	cmp	ip, r3
 8004366:	d107      	bne.n	8004378 <_malloc_r+0x140>
 8004368:	e142      	b.n	80045f0 <_malloc_r+0x3b8>
 800436a:	2900      	cmp	r1, #0
 800436c:	f280 8152 	bge.w	8004614 <_malloc_r+0x3dc>
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	459c      	cmp	ip, r3
 8004374:	f000 813c 	beq.w	80045f0 <_malloc_r+0x3b8>
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	f022 0203 	bic.w	r2, r2, #3
 800437e:	1b51      	subs	r1, r2, r5
 8004380:	290f      	cmp	r1, #15
 8004382:	ddf2      	ble.n	800436a <_malloc_r+0x132>
 8004384:	461c      	mov	r4, r3
 8004386:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800438a:	f854 8f08 	ldr.w	r8, [r4, #8]!
 800438e:	195a      	adds	r2, r3, r5
 8004390:	f045 0901 	orr.w	r9, r5, #1
 8004394:	f041 0501 	orr.w	r5, r1, #1
 8004398:	f8c3 9004 	str.w	r9, [r3, #4]
 800439c:	4630      	mov	r0, r6
 800439e:	f8c8 c00c 	str.w	ip, [r8, #12]
 80043a2:	f8cc 8008 	str.w	r8, [ip, #8]
 80043a6:	617a      	str	r2, [r7, #20]
 80043a8:	613a      	str	r2, [r7, #16]
 80043aa:	f8c2 e00c 	str.w	lr, [r2, #12]
 80043ae:	f8c2 e008 	str.w	lr, [r2, #8]
 80043b2:	6055      	str	r5, [r2, #4]
 80043b4:	5051      	str	r1, [r2, r1]
 80043b6:	f000 f9cf 	bl	8004758 <__malloc_unlock>
 80043ba:	e769      	b.n	8004290 <_malloc_r+0x58>
 80043bc:	2400      	movs	r4, #0
 80043be:	230c      	movs	r3, #12
 80043c0:	4620      	mov	r0, r4
 80043c2:	6033      	str	r3, [r6, #0]
 80043c4:	b003      	add	sp, #12
 80043c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ca:	217e      	movs	r1, #126	; 0x7e
 80043cc:	203f      	movs	r0, #63	; 0x3f
 80043ce:	e773      	b.n	80042b8 <_malloc_r+0x80>
 80043d0:	4423      	add	r3, r4
 80043d2:	68e1      	ldr	r1, [r4, #12]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	68a5      	ldr	r5, [r4, #8]
 80043d8:	f042 0201 	orr.w	r2, r2, #1
 80043dc:	60e9      	str	r1, [r5, #12]
 80043de:	4630      	mov	r0, r6
 80043e0:	608d      	str	r5, [r1, #8]
 80043e2:	605a      	str	r2, [r3, #4]
 80043e4:	f000 f9b8 	bl	8004758 <__malloc_unlock>
 80043e8:	3408      	adds	r4, #8
 80043ea:	4620      	mov	r0, r4
 80043ec:	b003      	add	sp, #12
 80043ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f2:	4423      	add	r3, r4
 80043f4:	4630      	mov	r0, r6
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	f042 0201 	orr.w	r2, r2, #1
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	f000 f9ab 	bl	8004758 <__malloc_unlock>
 8004402:	3408      	adds	r4, #8
 8004404:	4620      	mov	r0, r4
 8004406:	b003      	add	sp, #12
 8004408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800440c:	68bc      	ldr	r4, [r7, #8]
 800440e:	6863      	ldr	r3, [r4, #4]
 8004410:	f023 0803 	bic.w	r8, r3, #3
 8004414:	4545      	cmp	r5, r8
 8004416:	d804      	bhi.n	8004422 <_malloc_r+0x1ea>
 8004418:	ebc5 0308 	rsb	r3, r5, r8
 800441c:	2b0f      	cmp	r3, #15
 800441e:	f300 808c 	bgt.w	800453a <_malloc_r+0x302>
 8004422:	4b53      	ldr	r3, [pc, #332]	; (8004570 <_malloc_r+0x338>)
 8004424:	f8df a158 	ldr.w	sl, [pc, #344]	; 8004580 <_malloc_r+0x348>
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	f8da 3000 	ldr.w	r3, [sl]
 800442e:	3301      	adds	r3, #1
 8004430:	442a      	add	r2, r5
 8004432:	eb04 0b08 	add.w	fp, r4, r8
 8004436:	f000 8150 	beq.w	80046da <_malloc_r+0x4a2>
 800443a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800443e:	320f      	adds	r2, #15
 8004440:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004444:	f022 020f 	bic.w	r2, r2, #15
 8004448:	4611      	mov	r1, r2
 800444a:	4630      	mov	r0, r6
 800444c:	9201      	str	r2, [sp, #4]
 800444e:	f000 f985 	bl	800475c <_sbrk_r>
 8004452:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004456:	4681      	mov	r9, r0
 8004458:	9a01      	ldr	r2, [sp, #4]
 800445a:	f000 80f5 	beq.w	8004648 <_malloc_r+0x410>
 800445e:	4583      	cmp	fp, r0
 8004460:	f200 80ef 	bhi.w	8004642 <_malloc_r+0x40a>
 8004464:	4b43      	ldr	r3, [pc, #268]	; (8004574 <_malloc_r+0x33c>)
 8004466:	6819      	ldr	r1, [r3, #0]
 8004468:	45cb      	cmp	fp, r9
 800446a:	4411      	add	r1, r2
 800446c:	6019      	str	r1, [r3, #0]
 800446e:	f000 813d 	beq.w	80046ec <_malloc_r+0x4b4>
 8004472:	f8da 0000 	ldr.w	r0, [sl]
 8004476:	f8df e108 	ldr.w	lr, [pc, #264]	; 8004580 <_malloc_r+0x348>
 800447a:	3001      	adds	r0, #1
 800447c:	bf1b      	ittet	ne
 800447e:	ebcb 0b09 	rsbne	fp, fp, r9
 8004482:	4459      	addne	r1, fp
 8004484:	f8ce 9000 	streq.w	r9, [lr]
 8004488:	6019      	strne	r1, [r3, #0]
 800448a:	f019 0107 	ands.w	r1, r9, #7
 800448e:	f000 8107 	beq.w	80046a0 <_malloc_r+0x468>
 8004492:	f1c1 0008 	rsb	r0, r1, #8
 8004496:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800449a:	4481      	add	r9, r0
 800449c:	3108      	adds	r1, #8
 800449e:	444a      	add	r2, r9
 80044a0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80044a4:	ebc2 0a01 	rsb	sl, r2, r1
 80044a8:	4651      	mov	r1, sl
 80044aa:	4630      	mov	r0, r6
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	f000 f955 	bl	800475c <_sbrk_r>
 80044b2:	1c43      	adds	r3, r0, #1
 80044b4:	9b01      	ldr	r3, [sp, #4]
 80044b6:	f000 8127 	beq.w	8004708 <_malloc_r+0x4d0>
 80044ba:	ebc9 0200 	rsb	r2, r9, r0
 80044be:	4452      	add	r2, sl
 80044c0:	f042 0201 	orr.w	r2, r2, #1
 80044c4:	6819      	ldr	r1, [r3, #0]
 80044c6:	f8c7 9008 	str.w	r9, [r7, #8]
 80044ca:	4451      	add	r1, sl
 80044cc:	42bc      	cmp	r4, r7
 80044ce:	f8c9 2004 	str.w	r2, [r9, #4]
 80044d2:	6019      	str	r1, [r3, #0]
 80044d4:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8004574 <_malloc_r+0x33c>
 80044d8:	d016      	beq.n	8004508 <_malloc_r+0x2d0>
 80044da:	f1b8 0f0f 	cmp.w	r8, #15
 80044de:	f240 80e2 	bls.w	80046a6 <_malloc_r+0x46e>
 80044e2:	6862      	ldr	r2, [r4, #4]
 80044e4:	f1a8 030c 	sub.w	r3, r8, #12
 80044e8:	f023 0307 	bic.w	r3, r3, #7
 80044ec:	18e0      	adds	r0, r4, r3
 80044ee:	f002 0201 	and.w	r2, r2, #1
 80044f2:	f04f 0e05 	mov.w	lr, #5
 80044f6:	431a      	orrs	r2, r3
 80044f8:	2b0f      	cmp	r3, #15
 80044fa:	6062      	str	r2, [r4, #4]
 80044fc:	f8c0 e004 	str.w	lr, [r0, #4]
 8004500:	f8c0 e008 	str.w	lr, [r0, #8]
 8004504:	f200 8104 	bhi.w	8004710 <_malloc_r+0x4d8>
 8004508:	4b1b      	ldr	r3, [pc, #108]	; (8004578 <_malloc_r+0x340>)
 800450a:	68bc      	ldr	r4, [r7, #8]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	4291      	cmp	r1, r2
 8004510:	bf88      	it	hi
 8004512:	6019      	strhi	r1, [r3, #0]
 8004514:	4b19      	ldr	r3, [pc, #100]	; (800457c <_malloc_r+0x344>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4291      	cmp	r1, r2
 800451a:	6862      	ldr	r2, [r4, #4]
 800451c:	bf88      	it	hi
 800451e:	6019      	strhi	r1, [r3, #0]
 8004520:	f022 0203 	bic.w	r2, r2, #3
 8004524:	4295      	cmp	r5, r2
 8004526:	eba2 0305 	sub.w	r3, r2, r5
 800452a:	d801      	bhi.n	8004530 <_malloc_r+0x2f8>
 800452c:	2b0f      	cmp	r3, #15
 800452e:	dc04      	bgt.n	800453a <_malloc_r+0x302>
 8004530:	4630      	mov	r0, r6
 8004532:	f000 f911 	bl	8004758 <__malloc_unlock>
 8004536:	2400      	movs	r4, #0
 8004538:	e6aa      	b.n	8004290 <_malloc_r+0x58>
 800453a:	1962      	adds	r2, r4, r5
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	f045 0501 	orr.w	r5, r5, #1
 8004544:	6065      	str	r5, [r4, #4]
 8004546:	4630      	mov	r0, r6
 8004548:	60ba      	str	r2, [r7, #8]
 800454a:	6053      	str	r3, [r2, #4]
 800454c:	f000 f904 	bl	8004758 <__malloc_unlock>
 8004550:	3408      	adds	r4, #8
 8004552:	4620      	mov	r0, r4
 8004554:	b003      	add	sp, #12
 8004556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800455a:	2814      	cmp	r0, #20
 800455c:	d969      	bls.n	8004632 <_malloc_r+0x3fa>
 800455e:	2854      	cmp	r0, #84	; 0x54
 8004560:	f200 8097 	bhi.w	8004692 <_malloc_r+0x45a>
 8004564:	0b28      	lsrs	r0, r5, #12
 8004566:	306e      	adds	r0, #110	; 0x6e
 8004568:	0041      	lsls	r1, r0, #1
 800456a:	e6a5      	b.n	80042b8 <_malloc_r+0x80>
 800456c:	20000464 	.word	0x20000464
 8004570:	200008a4 	.word	0x200008a4
 8004574:	200008a8 	.word	0x200008a8
 8004578:	200008a0 	.word	0x200008a0
 800457c:	2000089c 	.word	0x2000089c
 8004580:	20000870 	.word	0x20000870
 8004584:	0a5a      	lsrs	r2, r3, #9
 8004586:	2a04      	cmp	r2, #4
 8004588:	d956      	bls.n	8004638 <_malloc_r+0x400>
 800458a:	2a14      	cmp	r2, #20
 800458c:	f200 80a7 	bhi.w	80046de <_malloc_r+0x4a6>
 8004590:	325b      	adds	r2, #91	; 0x5b
 8004592:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8004596:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 800459a:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8004750 <_malloc_r+0x518>
 800459e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80045a2:	4561      	cmp	r1, ip
 80045a4:	f000 8085 	beq.w	80046b2 <_malloc_r+0x47a>
 80045a8:	684a      	ldr	r2, [r1, #4]
 80045aa:	f022 0203 	bic.w	r2, r2, #3
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d202      	bcs.n	80045b8 <_malloc_r+0x380>
 80045b2:	6889      	ldr	r1, [r1, #8]
 80045b4:	458c      	cmp	ip, r1
 80045b6:	d1f7      	bne.n	80045a8 <_malloc_r+0x370>
 80045b8:	68ca      	ldr	r2, [r1, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60e2      	str	r2, [r4, #12]
 80045be:	60a1      	str	r1, [r4, #8]
 80045c0:	6094      	str	r4, [r2, #8]
 80045c2:	60cc      	str	r4, [r1, #12]
 80045c4:	e6ba      	b.n	800433c <_malloc_r+0x104>
 80045c6:	1963      	adds	r3, r4, r5
 80045c8:	f042 0701 	orr.w	r7, r2, #1
 80045cc:	f045 0501 	orr.w	r5, r5, #1
 80045d0:	6065      	str	r5, [r4, #4]
 80045d2:	4630      	mov	r0, r6
 80045d4:	614b      	str	r3, [r1, #20]
 80045d6:	610b      	str	r3, [r1, #16]
 80045d8:	f8c3 e00c 	str.w	lr, [r3, #12]
 80045dc:	f8c3 e008 	str.w	lr, [r3, #8]
 80045e0:	605f      	str	r7, [r3, #4]
 80045e2:	509a      	str	r2, [r3, r2]
 80045e4:	3408      	adds	r4, #8
 80045e6:	f000 f8b7 	bl	8004758 <__malloc_unlock>
 80045ea:	e651      	b.n	8004290 <_malloc_r+0x58>
 80045ec:	684b      	ldr	r3, [r1, #4]
 80045ee:	e6a5      	b.n	800433c <_malloc_r+0x104>
 80045f0:	f109 0901 	add.w	r9, r9, #1
 80045f4:	f019 0f03 	tst.w	r9, #3
 80045f8:	f10c 0c08 	add.w	ip, ip, #8
 80045fc:	f47f aeb0 	bne.w	8004360 <_malloc_r+0x128>
 8004600:	e02b      	b.n	800465a <_malloc_r+0x422>
 8004602:	f104 0308 	add.w	r3, r4, #8
 8004606:	6964      	ldr	r4, [r4, #20]
 8004608:	42a3      	cmp	r3, r4
 800460a:	bf08      	it	eq
 800460c:	3002      	addeq	r0, #2
 800460e:	f43f ae68 	beq.w	80042e2 <_malloc_r+0xaa>
 8004612:	e62d      	b.n	8004270 <_malloc_r+0x38>
 8004614:	441a      	add	r2, r3
 8004616:	461c      	mov	r4, r3
 8004618:	6851      	ldr	r1, [r2, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8004620:	f041 0101 	orr.w	r1, r1, #1
 8004624:	6051      	str	r1, [r2, #4]
 8004626:	4630      	mov	r0, r6
 8004628:	60eb      	str	r3, [r5, #12]
 800462a:	609d      	str	r5, [r3, #8]
 800462c:	f000 f894 	bl	8004758 <__malloc_unlock>
 8004630:	e62e      	b.n	8004290 <_malloc_r+0x58>
 8004632:	305b      	adds	r0, #91	; 0x5b
 8004634:	0041      	lsls	r1, r0, #1
 8004636:	e63f      	b.n	80042b8 <_malloc_r+0x80>
 8004638:	099a      	lsrs	r2, r3, #6
 800463a:	3238      	adds	r2, #56	; 0x38
 800463c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8004640:	e7a9      	b.n	8004596 <_malloc_r+0x35e>
 8004642:	42bc      	cmp	r4, r7
 8004644:	f43f af0e 	beq.w	8004464 <_malloc_r+0x22c>
 8004648:	68bc      	ldr	r4, [r7, #8]
 800464a:	6862      	ldr	r2, [r4, #4]
 800464c:	f022 0203 	bic.w	r2, r2, #3
 8004650:	e768      	b.n	8004524 <_malloc_r+0x2ec>
 8004652:	f8d8 8000 	ldr.w	r8, [r8]
 8004656:	4598      	cmp	r8, r3
 8004658:	d177      	bne.n	800474a <_malloc_r+0x512>
 800465a:	f010 0f03 	tst.w	r0, #3
 800465e:	f1a8 0308 	sub.w	r3, r8, #8
 8004662:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8004666:	d1f4      	bne.n	8004652 <_malloc_r+0x41a>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	ea23 0304 	bic.w	r3, r3, r4
 800466e:	607b      	str	r3, [r7, #4]
 8004670:	0064      	lsls	r4, r4, #1
 8004672:	429c      	cmp	r4, r3
 8004674:	f63f aeca 	bhi.w	800440c <_malloc_r+0x1d4>
 8004678:	2c00      	cmp	r4, #0
 800467a:	f43f aec7 	beq.w	800440c <_malloc_r+0x1d4>
 800467e:	4223      	tst	r3, r4
 8004680:	4648      	mov	r0, r9
 8004682:	f47f ae69 	bne.w	8004358 <_malloc_r+0x120>
 8004686:	0064      	lsls	r4, r4, #1
 8004688:	4223      	tst	r3, r4
 800468a:	f100 0004 	add.w	r0, r0, #4
 800468e:	d0fa      	beq.n	8004686 <_malloc_r+0x44e>
 8004690:	e662      	b.n	8004358 <_malloc_r+0x120>
 8004692:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8004696:	d818      	bhi.n	80046ca <_malloc_r+0x492>
 8004698:	0be8      	lsrs	r0, r5, #15
 800469a:	3077      	adds	r0, #119	; 0x77
 800469c:	0041      	lsls	r1, r0, #1
 800469e:	e60b      	b.n	80042b8 <_malloc_r+0x80>
 80046a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046a4:	e6fb      	b.n	800449e <_malloc_r+0x266>
 80046a6:	2301      	movs	r3, #1
 80046a8:	f8c9 3004 	str.w	r3, [r9, #4]
 80046ac:	464c      	mov	r4, r9
 80046ae:	2200      	movs	r2, #0
 80046b0:	e738      	b.n	8004524 <_malloc_r+0x2ec>
 80046b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80046b6:	1092      	asrs	r2, r2, #2
 80046b8:	f04f 0c01 	mov.w	ip, #1
 80046bc:	fa0c f202 	lsl.w	r2, ip, r2
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c8 3004 	str.w	r3, [r8, #4]
 80046c6:	460a      	mov	r2, r1
 80046c8:	e778      	b.n	80045bc <_malloc_r+0x384>
 80046ca:	f240 5354 	movw	r3, #1364	; 0x554
 80046ce:	4298      	cmp	r0, r3
 80046d0:	d817      	bhi.n	8004702 <_malloc_r+0x4ca>
 80046d2:	0ca8      	lsrs	r0, r5, #18
 80046d4:	307c      	adds	r0, #124	; 0x7c
 80046d6:	0041      	lsls	r1, r0, #1
 80046d8:	e5ee      	b.n	80042b8 <_malloc_r+0x80>
 80046da:	3210      	adds	r2, #16
 80046dc:	e6b4      	b.n	8004448 <_malloc_r+0x210>
 80046de:	2a54      	cmp	r2, #84	; 0x54
 80046e0:	d81e      	bhi.n	8004720 <_malloc_r+0x4e8>
 80046e2:	0b1a      	lsrs	r2, r3, #12
 80046e4:	326e      	adds	r2, #110	; 0x6e
 80046e6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80046ea:	e754      	b.n	8004596 <_malloc_r+0x35e>
 80046ec:	f3cb 000b 	ubfx	r0, fp, #0, #12
 80046f0:	2800      	cmp	r0, #0
 80046f2:	f47f aebe 	bne.w	8004472 <_malloc_r+0x23a>
 80046f6:	4442      	add	r2, r8
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	605a      	str	r2, [r3, #4]
 8004700:	e702      	b.n	8004508 <_malloc_r+0x2d0>
 8004702:	21fc      	movs	r1, #252	; 0xfc
 8004704:	207e      	movs	r0, #126	; 0x7e
 8004706:	e5d7      	b.n	80042b8 <_malloc_r+0x80>
 8004708:	2201      	movs	r2, #1
 800470a:	f04f 0a00 	mov.w	sl, #0
 800470e:	e6d9      	b.n	80044c4 <_malloc_r+0x28c>
 8004710:	f104 0108 	add.w	r1, r4, #8
 8004714:	4630      	mov	r0, r6
 8004716:	f7ff fcb7 	bl	8004088 <_free_r>
 800471a:	f8da 1000 	ldr.w	r1, [sl]
 800471e:	e6f3      	b.n	8004508 <_malloc_r+0x2d0>
 8004720:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004724:	d804      	bhi.n	8004730 <_malloc_r+0x4f8>
 8004726:	0bda      	lsrs	r2, r3, #15
 8004728:	3277      	adds	r2, #119	; 0x77
 800472a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800472e:	e732      	b.n	8004596 <_malloc_r+0x35e>
 8004730:	f240 5154 	movw	r1, #1364	; 0x554
 8004734:	428a      	cmp	r2, r1
 8004736:	d804      	bhi.n	8004742 <_malloc_r+0x50a>
 8004738:	0c9a      	lsrs	r2, r3, #18
 800473a:	327c      	adds	r2, #124	; 0x7c
 800473c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8004740:	e729      	b.n	8004596 <_malloc_r+0x35e>
 8004742:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8004746:	227e      	movs	r2, #126	; 0x7e
 8004748:	e725      	b.n	8004596 <_malloc_r+0x35e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	e790      	b.n	8004670 <_malloc_r+0x438>
 800474e:	bf00      	nop
 8004750:	20000464 	.word	0x20000464

08004754 <__malloc_lock>:
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop

08004758 <__malloc_unlock>:
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop

0800475c <_sbrk_r>:
 800475c:	b538      	push	{r3, r4, r5, lr}
 800475e:	4c07      	ldr	r4, [pc, #28]	; (800477c <_sbrk_r+0x20>)
 8004760:	2300      	movs	r3, #0
 8004762:	4605      	mov	r5, r0
 8004764:	4608      	mov	r0, r1
 8004766:	6023      	str	r3, [r4, #0]
 8004768:	f7fc f908 	bl	800097c <_sbrk>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	d000      	beq.n	8004772 <_sbrk_r+0x16>
 8004770:	bd38      	pop	{r3, r4, r5, pc}
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0fb      	beq.n	8004770 <_sbrk_r+0x14>
 8004778:	602b      	str	r3, [r5, #0]
 800477a:	bd38      	pop	{r3, r4, r5, pc}
 800477c:	200008d0 	.word	0x200008d0
 8004780:	74697865 	.word	0x74697865
 8004784:	00000000 	.word	0x00000000
 8004788:	70616548 	.word	0x70616548
 800478c:	646e6120 	.word	0x646e6120
 8004790:	61747320 	.word	0x61747320
 8004794:	63206b63 	.word	0x63206b63
 8004798:	696c6c6f 	.word	0x696c6c6f
 800479c:	6e6f6973 	.word	0x6e6f6973
 80047a0:	0000000a 	.word	0x0000000a
 80047a4:	00000043 	.word	0x00000043

080047a8 <_global_impure_ptr>:
 80047a8:	20000038                                8.. 

080047ac <__EH_FRAME_BEGIN__>:
 80047ac:	00000000                                ....

080047b0 <_init>:
 80047b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b2:	bf00      	nop
 80047b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b6:	bc08      	pop	{r3}
 80047b8:	469e      	mov	lr, r3
 80047ba:	4770      	bx	lr

080047bc <_fini>:
 80047bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047be:	bf00      	nop
 80047c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047c2:	bc08      	pop	{r3}
 80047c4:	469e      	mov	lr, r3
 80047c6:	4770      	bx	lr
